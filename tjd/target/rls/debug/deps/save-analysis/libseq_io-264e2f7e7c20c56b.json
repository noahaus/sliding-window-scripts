{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1","program":"/Users/noahaus/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","seq_io","/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=264e2f7e7c20c56b","-C","extra-filename=-264e2f7e7c20c56b","--out-dir","/Users/noahaus/GithubRepos/sliding-window-scripts/tjd/target/rls/debug/deps","-L","dependency=/Users/noahaus/GithubRepos/sliding-window-scripts/tjd/target/rls/debug/deps","--extern","buf_redux=/Users/noahaus/GithubRepos/sliding-window-scripts/tjd/target/rls/debug/deps/libbuf_redux-bedd1ed644f10f05.rmeta","--extern","crossbeam=/Users/noahaus/GithubRepos/sliding-window-scripts/tjd/target/rls/debug/deps/libcrossbeam-780b1844241e9283.rmeta","--extern","memchr=/Users/noahaus/GithubRepos/sliding-window-scripts/tjd/target/rls/debug/deps/libmemchr-8f2423276db2d0f4.rmeta","--extern","scoped_threadpool=/Users/noahaus/GithubRepos/sliding-window-scripts/tjd/target/rls/debug/deps/libscoped_threadpool-da0c4fadbd5d3355.rmeta","--extern","serde=/Users/noahaus/GithubRepos/sliding-window-scripts/tjd/target/rls/debug/deps/libserde-f14fdd58a988ef62.rmeta","--extern","serde_derive=/Users/noahaus/GithubRepos/sliding-window-scripts/tjd/target/rls/debug/deps/libserde_derive-dd69564c8db0ee2a.dylib","--cap-lints","allow","--error-format=json","--sysroot","/Users/noahaus/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/noahaus/GithubRepos/sliding-window-scripts/tjd/target/rls/debug/deps/libseq_io-264e2f7e7c20c56b.rmeta"},"prelude":{"crate_id":{"name":"seq_io","disambiguator":[10875852335803618255,1353260784253870043]},"crate_root":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src","external_crates":[{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17709530074661319104,12336107577347767734]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7138156953393190069,11167026927698897809]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11939350525270529775,5037047709352975340]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7424844044863599670,8838585625468081887]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4100565041195182675,5566087110101365955]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12006298212829472042,4483643569962591785]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16083605182766867675,18153965418074129170]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13622714777497736699,12208407265214949534]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7290380455030431949,16719885876051447607]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[447808001145654106,10581376888684971677]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13533970680996139336,18250961867226035502]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[212669238320550075,14725093603103672492]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[17611450619260455171,13049759995292817799]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[2915321326152136006,11103866167427651478]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[16327418871979137000,16753155218778980611]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":16,"id":{"name":"buf_redux","disambiguator":[12288577685144372674,13217912948574165521]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":17,"id":{"name":"memchr","disambiguator":[1119973124114393915,970789945266651457]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":18,"id":{"name":"safemem","disambiguator":[9526110468405800561,17495733905961763033]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":19,"id":{"name":"serde_derive","disambiguator":[10323145263716644869,10265784414073812388]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","num":20,"id":{"name":"serde","disambiguator":[17123263170307211263,1653270144395831237]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":21,"id":{"name":"crossbeam","disambiguator":[18387551218697258244,2168521630653168290]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":22,"id":{"name":"crossbeam_utils","disambiguator":[16668692916120385191,4328325494436156488]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":23,"id":{"name":"cfg_if","disambiguator":[3729267342832231031,17347908593988979979]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":24,"id":{"name":"lazy_static","disambiguator":[7064805322198458713,2909941048741555990]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":25,"id":{"name":"crossbeam_epoch","disambiguator":[6037153995746319284,17524627518456757279]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":26,"id":{"name":"const_fn","disambiguator":[1271247964941735265,6018662020379010396]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":27,"id":{"name":"scopeguard","disambiguator":[12968520028712090458,6544575961472716627]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":28,"id":{"name":"memoffset","disambiguator":[9437671236443710283,5349915898917017053]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":29,"id":{"name":"crossbeam_queue","disambiguator":[8423396804334633500,12028765247084446832]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":30,"id":{"name":"crossbeam_deque","disambiguator":[15788342180409302823,16707416375078454468]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":31,"id":{"name":"crossbeam_channel","disambiguator":[8374695720019002821,5187197759686426176]}},{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","num":32,"id":{"name":"scoped_threadpool","disambiguator":[8934545474280324422,12550238785046406414]}}],"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":0,"byte_end":5939,"line_start":1,"line_end":174,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":0,"byte_end":5939,"line_start":1,"line_end":174,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":209},{"krate":0,"index":373},{"krate":0,"index":459},{"krate":0,"index":478},{"krate":0,"index":479}],"decl_id":null,"docs":" This library provides an(other) attempt at high performance FASTA and FASTQ parsing and writing.\n The FASTA parser can read and write multi-line files. The FASTQ parser supports only single\n lines.","sig":null,"attributes":[{"value":"/ This library provides an(other) attempt at high performance FASTA and FASTQ parsing and writing.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":0,"byte_end":100,"line_start":1,"line_end":1,"column_start":1,"column_end":101}},{"value":"/ The FASTA parser can read and write multi-line files. The FASTQ parser supports only single","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":101,"byte_end":196,"line_start":2,"line_end":2,"column_start":1,"column_end":96}},{"value":"/ lines.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":197,"byte_end":207,"line_start":3,"line_end":3,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":208,"byte_end":211,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ By default, the parsers avoid allocations and copying as much as possible.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":212,"byte_end":290,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ [`fasta::RefRecord`](fasta/struct.RefRecord.html) and","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":291,"byte_end":348,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"/ [`fastq::RefRecord`](fastq/struct.RefRecord.html) borrow from the underlying buffered","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":349,"byte_end":438,"line_start":7,"line_end":7,"column_start":1,"column_end":90}},{"value":"/ reader. In addition, `fasta::RefRecord` offers the","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":439,"byte_end":493,"line_start":8,"line_end":8,"column_start":1,"column_end":55}},{"value":"/ [`seq_lines()`](fasta/struct.RefRecord.html#method.seq_lines) method,","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":494,"byte_end":567,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ which allows iterating over individual sequence lines in a multi-line FASTA file","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":568,"byte_end":652,"line_start":10,"line_end":10,"column_start":1,"column_end":85}},{"value":"/ without the need to copy the data.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":653,"byte_end":691,"line_start":11,"line_end":11,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":692,"byte_end":695,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ By default, both parsers use a buffer of 64 KiB size. If a record with a longer","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":696,"byte_end":779,"line_start":13,"line_end":13,"column_start":1,"column_end":84}},{"value":"/ sequence is encountered, the buffer will automatically grow. How it grows can be","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":780,"byte_end":864,"line_start":14,"line_end":14,"column_start":1,"column_end":85}},{"value":"/ configured. See [below](#large-sequences) for more information.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":865,"byte_end":932,"line_start":15,"line_end":15,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":933,"byte_end":936,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # More detailed documentation","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":937,"byte_end":970,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":971,"byte_end":974,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Please refer to the module docs for more information on how to use the reading and writing","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":975,"byte_end":1069,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/ functions, as well as information on the exact parsing behaviour:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1070,"byte_end":1139,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1140,"byte_end":1143,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ * [`fasta module`](fasta) and [`fasta::Reader`](fasta/struct.Reader.html)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1144,"byte_end":1221,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ * [`fastq module`](fastq) and [`fastq::Reader`](fastq/struct.Reader.html)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1222,"byte_end":1299,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1300,"byte_end":1303,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example FASTQ parser:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1304,"byte_end":1331,"line_start":25,"line_end":25,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1332,"byte_end":1335,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This code prints the ID string from each FASTQ record.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1336,"byte_end":1394,"line_start":27,"line_end":27,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1395,"byte_end":1398,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1399,"byte_end":1412,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/ use seq_io::fastq::{Reader,Record};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1413,"byte_end":1452,"line_start":30,"line_end":30,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1453,"byte_end":1456,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::from_path(\"seqs.fastq\").unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1457,"byte_end":1519,"line_start":32,"line_end":32,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1520,"byte_end":1523,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ while let Some(record) = reader.next() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1524,"byte_end":1568,"line_start":34,"line_end":34,"column_start":1,"column_end":45}},{"value":"/     let record = record.expect(\"Error reading record\");","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1569,"byte_end":1628,"line_start":35,"line_end":35,"column_start":1,"column_end":60}},{"value":"/     println!(\"{}\", record.id().unwrap());","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1629,"byte_end":1674,"line_start":36,"line_end":36,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1675,"byte_end":1680,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1681,"byte_end":1688,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1689,"byte_end":1692,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Example FASTA parser calculating mean sequence length:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1693,"byte_end":1753,"line_start":40,"line_end":40,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1754,"byte_end":1757,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The FASTA reader works just the same. One challenge with the FASTA","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1758,"byte_end":1828,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/ format is that the sequence can be broken into multiple lines.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1829,"byte_end":1895,"line_start":43,"line_end":43,"column_start":1,"column_end":67}},{"value":"/ Therefore, it is not always possible to get a slice to the whole sequence","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1896,"byte_end":1973,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ without copying the data. But it is possible to use `seq_lines()`","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":1974,"byte_end":2043,"line_start":45,"line_end":45,"column_start":1,"column_end":70}},{"value":"/ for efficiently iterating over each sequence line:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2044,"byte_end":2098,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2099,"byte_end":2102,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2103,"byte_end":2116,"line_start":48,"line_end":48,"column_start":1,"column_end":14}},{"value":"/ use seq_io::fasta::{Reader,Record};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2117,"byte_end":2156,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2157,"byte_end":2160,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::from_path(\"seqs.fasta\").unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2161,"byte_end":2223,"line_start":51,"line_end":51,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2224,"byte_end":2227,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ let mut n = 0;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2228,"byte_end":2246,"line_start":53,"line_end":53,"column_start":1,"column_end":19}},{"value":"/ let mut sum = 0;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2247,"byte_end":2267,"line_start":54,"line_end":54,"column_start":1,"column_end":21}},{"value":"/ while let Some(record) = reader.next() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2268,"byte_end":2312,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/     let record = record.expect(\"Error reading record\");","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2313,"byte_end":2372,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/     for s in record.seq_lines() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2373,"byte_end":2410,"line_start":57,"line_end":57,"column_start":1,"column_end":38}},{"value":"/         sum += s.len();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2411,"byte_end":2438,"line_start":58,"line_end":58,"column_start":1,"column_end":28}},{"value":"/     }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2439,"byte_end":2448,"line_start":59,"line_end":59,"column_start":1,"column_end":10}},{"value":"/     n += 1;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2449,"byte_end":2464,"line_start":60,"line_end":60,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2465,"byte_end":2470,"line_start":61,"line_end":61,"column_start":1,"column_end":6}},{"value":"/ println!(\"mean sequence length of {} records: {:.1} bp\", n, sum as f32 / n as f32);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2471,"byte_end":2558,"line_start":62,"line_end":62,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2559,"byte_end":2566,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/ If the whole sequence is required at once, there is the","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2567,"byte_end":2626,"line_start":64,"line_end":64,"column_start":1,"column_end":60}},{"value":"/ [`full_seq`](fasta/struct.RefRecord.html#method.full_seq),","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2627,"byte_end":2689,"line_start":65,"line_end":65,"column_start":1,"column_end":63}},{"value":"/ which will only allocate the sequence if there are multiple lines.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2690,"byte_end":2760,"line_start":66,"line_end":66,"column_start":1,"column_end":71}},{"value":"/ use seq_io::fasta::{Reader,OwnedRecord};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2761,"byte_end":2805,"line_start":67,"line_end":67,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2806,"byte_end":2809,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ # Large sequences","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2810,"byte_end":2831,"line_start":69,"line_end":69,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2832,"byte_end":2835,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Due to the design of the parsers, each sequence record must fit into the underlying","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2836,"byte_end":2923,"line_start":71,"line_end":71,"column_start":1,"column_end":88}},{"value":"/ buffer as a whole. There are different ways to deal with large sequences:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":2924,"byte_end":3001,"line_start":72,"line_end":72,"column_start":1,"column_end":78}},{"value":"/ It is possible configure initial buffer size using `Reader::with_capacity()`.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3002,"byte_end":3083,"line_start":73,"line_end":73,"column_start":1,"column_end":82}},{"value":"/ However, the buffer will also automatically double its size if a record doesn't fit.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3084,"byte_end":3172,"line_start":74,"line_end":74,"column_start":1,"column_end":89}},{"value":"/ How it grows can be configured by applying another policy.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3173,"byte_end":3235,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3236,"byte_end":3239,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ For example, the readers can be configured to return","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3240,"byte_end":3296,"line_start":77,"line_end":77,"column_start":1,"column_end":57}},{"value":"/ [`fasta::Error::BufferLimit`](fasta/enum.Error.html#variant.BufferLimit) /","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3297,"byte_end":3375,"line_start":78,"line_end":78,"column_start":1,"column_end":79}},{"value":"/ [`fastq::Error::BufferLimit`](fastq/enum.Error.html#variant.BufferLimit)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3376,"byte_end":3452,"line_start":79,"line_end":79,"column_start":1,"column_end":77}},{"value":"/ if buffer size grows too large. This is done using `set_policy()`:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3453,"byte_end":3523,"line_start":80,"line_end":80,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3524,"byte_end":3527,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3528,"byte_end":3541,"line_start":82,"line_end":82,"column_start":1,"column_end":14}},{"value":"/ use seq_io::fasta::Reader;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3542,"byte_end":3572,"line_start":83,"line_end":83,"column_start":1,"column_end":31}},{"value":"/ use seq_io::policy::DoubleUntilLimited;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3573,"byte_end":3616,"line_start":84,"line_end":84,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3617,"byte_end":3620,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // The buffer doubles its size until 128 MiB, then grows by steps","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3621,"byte_end":3690,"line_start":86,"line_end":86,"column_start":1,"column_end":70}},{"value":"/ // of 128 MiB. If it reaches 1 GiB, there will be an error.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3691,"byte_end":3754,"line_start":87,"line_end":87,"column_start":1,"column_end":64}},{"value":"/ let policy = DoubleUntilLimited::new(1 << 30, 1 << 32);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3755,"byte_end":3814,"line_start":88,"line_end":88,"column_start":1,"column_end":60}},{"value":"/ let mut reader = Reader::from_path(\"input.fasta\").unwrap()","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3815,"byte_end":3877,"line_start":89,"line_end":89,"column_start":1,"column_end":63}},{"value":"/     .set_policy(policy);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3878,"byte_end":3906,"line_start":90,"line_end":90,"column_start":1,"column_end":29}},{"value":"/ // (...)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3907,"byte_end":3919,"line_start":91,"line_end":91,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3920,"byte_end":3927,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ For information on how to create a custom policy, refer to the","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3928,"byte_end":3994,"line_start":93,"line_end":93,"column_start":1,"column_end":67}},{"value":"/ [`policy`](policy) module docs.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":3995,"byte_end":4030,"line_start":94,"line_end":94,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4031,"byte_end":4034,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ # Owned records","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4035,"byte_end":4054,"line_start":96,"line_end":96,"column_start":1,"column_end":20}},{"value":"/ Both readers also provide iterators similar to *Rust-Bio*, which return owned data. This","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4055,"byte_end":4147,"line_start":97,"line_end":97,"column_start":1,"column_end":93}},{"value":"/ is slower, but make sense, e.g. if the records are collected in to a vector:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4148,"byte_end":4228,"line_start":98,"line_end":98,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4229,"byte_end":4232,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4233,"byte_end":4246,"line_start":100,"line_end":100,"column_start":1,"column_end":14}},{"value":"/ use seq_io::fasta::Reader;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4247,"byte_end":4277,"line_start":101,"line_end":101,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4278,"byte_end":4281,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::from_path(\"input.fasta\").unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4282,"byte_end":4345,"line_start":103,"line_end":103,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4346,"byte_end":4349,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ let records: Result<Vec<_>, _> = reader.records().collect();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4350,"byte_end":4414,"line_start":105,"line_end":105,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4415,"byte_end":4422,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4423,"byte_end":4426,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ # Parallel processing","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4427,"byte_end":4452,"line_start":108,"line_end":108,"column_start":1,"column_end":26}},{"value":"/ Functions for parallel processing can be found in the [`parallel`](parallel/index.html) module","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":4453,"byte_end":4551,"line_start":109,"line_end":109,"column_start":1,"column_end":99}}]},{"kind":"Mod","id":{"krate":0,"index":12},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fasta","qualname":"::fasta","value":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":1078},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":42},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":71},{"krate":0,"index":75},{"krate":0,"index":80},{"krate":0,"index":88},{"krate":0,"index":92},{"krate":0,"index":481},{"krate":0,"index":505},{"krate":0,"index":503},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":486},{"krate":0,"index":484},{"krate":0,"index":99},{"krate":0,"index":507},{"krate":0,"index":516},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":518},{"krate":0,"index":572},{"krate":0,"index":570},{"krate":0,"index":564},{"krate":0,"index":521},{"krate":0,"index":109},{"krate":0,"index":113},{"krate":0,"index":574},{"krate":0,"index":581},{"krate":0,"index":578},{"krate":0,"index":129},{"krate":0,"index":137},{"krate":0,"index":146},{"krate":0,"index":151},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":584},{"krate":0,"index":645},{"krate":0,"index":643},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":630},{"krate":0,"index":587},{"krate":0,"index":164},{"krate":0,"index":647},{"krate":0,"index":704},{"krate":0,"index":702},{"krate":0,"index":696},{"krate":0,"index":651},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":178},{"krate":0,"index":182},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":205}],"decl_id":null,"docs":" Efficient FASTA reading and writing","sig":null,"attributes":[{"value":"/ Efficient FASTA reading and writing","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":5941,"byte_end":5980,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":5981,"byte_end":5984,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":5985,"byte_end":5998,"line_start":3,"line_end":3,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":5999,"byte_end":6002,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This example reads some content, writes it back and compares the output","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6003,"byte_end":6078,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ (should be the same):","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6079,"byte_end":6104,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6105,"byte_end":6108,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6109,"byte_end":6116,"line_start":8,"line_end":8,"column_start":1,"column_end":8}},{"value":"/ use seq_io::fasta::{Reader, Record};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6117,"byte_end":6157,"line_start":9,"line_end":9,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6158,"byte_end":6161,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ let input = b\">id1","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6162,"byte_end":6184,"line_start":11,"line_end":11,"column_start":1,"column_end":23}},{"value":"/ ACGT","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6185,"byte_end":6193,"line_start":12,"line_end":12,"column_start":1,"column_end":9}},{"value":"/ ACGT","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6194,"byte_end":6202,"line_start":13,"line_end":13,"column_start":1,"column_end":9}},{"value":"/ >id2","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6203,"byte_end":6211,"line_start":14,"line_end":14,"column_start":1,"column_end":9}},{"value":"/ TGCA","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6212,"byte_end":6220,"line_start":15,"line_end":15,"column_start":1,"column_end":9}},{"value":"/ TGCA","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6221,"byte_end":6229,"line_start":16,"line_end":16,"column_start":1,"column_end":9}},{"value":"/ \";","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6230,"byte_end":6236,"line_start":17,"line_end":17,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6237,"byte_end":6240,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(&input[..]);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6241,"byte_end":6286,"line_start":19,"line_end":19,"column_start":1,"column_end":46}},{"value":"/ let mut output = vec![];","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6287,"byte_end":6315,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6316,"byte_end":6319,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ while let Some(record) = reader.next() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6320,"byte_end":6364,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/     let record = record.expect(\"Error reading record\");","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6365,"byte_end":6424,"line_start":23,"line_end":23,"column_start":1,"column_end":60}},{"value":"/     println!(\"id: {}\", record.id().unwrap());","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6425,"byte_end":6474,"line_start":24,"line_end":24,"column_start":1,"column_end":50}},{"value":"/     record.write_wrap(&mut output, 4);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6475,"byte_end":6517,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/ }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6518,"byte_end":6523,"line_start":26,"line_end":26,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6524,"byte_end":6527,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(input, output.as_slice());","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6528,"byte_end":6569,"line_start":28,"line_end":28,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6570,"byte_end":6577,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6578,"byte_end":6581,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Details on parsing behaviour","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6582,"byte_end":6616,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6617,"byte_end":6620,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ * The parser handles UNIX (LF) and Windows (CRLF) line endings, but not old","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6621,"byte_end":6700,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/   Mac-style (CR) endings. However, FASTA writing currently always uses UNIX","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6701,"byte_end":6780,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/   line endings.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6781,"byte_end":6800,"line_start":35,"line_end":35,"column_start":1,"column_end":20}},{"value":"/ * Empty lines are allowed anywhere in the file, they will just be ignored.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6801,"byte_end":6879,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/   The first non-empty line must start with `>`, indicating the first header.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6880,"byte_end":6960,"line_start":37,"line_end":37,"column_start":1,"column_end":81}},{"value":"/ * Whitespace at the end of header and sequence lines is never removed.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":6961,"byte_end":7035,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ * If two consecutive FASTA header lines (starting with `>`) are encountered","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":7036,"byte_end":7115,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/   without intermediate sequence line, the first record will have an empty","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":7116,"byte_end":7193,"line_start":40,"line_end":40,"column_start":1,"column_end":78}},{"value":"/   sequence. The same is true if the input ends with a header line.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":7194,"byte_end":7264,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"/ * Empty input will result in `None` being returned immediately by","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":7265,"byte_end":7334,"line_start":42,"line_end":42,"column_start":1,"column_end":70}},{"value":"/   `fasta::Reader::next()` and in empty iterators for `RecordsIter` /","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":7335,"byte_end":7407,"line_start":43,"line_end":43,"column_start":1,"column_end":73}},{"value":"/   `RecordsIntoIter`.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":7408,"byte_end":7432,"line_start":44,"line_end":44,"column_start":1,"column_end":25}},{"value":"/ * Comment lines starting with `;` are not supported.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":7433,"byte_end":7489,"line_start":45,"line_end":45,"column_start":1,"column_end":57}},{"value":"/   If at the start of a file, there will be an error, since `>` is expected.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":7490,"byte_end":7569,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/   Intermediate comments are appended to the sequence.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":7570,"byte_end":7627,"line_start":47,"line_end":47,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":33},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":7993,"byte_end":7999,"line_start":68,"line_end":68,"column_start":12,"column_end":18},"name":"Reader","qualname":"::fasta::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Parser for FASTA files.\n","sig":null,"attributes":[{"value":"/ Parser for FASTA files.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":7954,"byte_end":7981,"line_start":67,"line_end":67,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8639,"byte_end":8642,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R, DefaultPolicy>>::new","value":"pub fn new(R) -> Reader<R, StdPolicy>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reader with the default buffer size of 64 KiB","sig":null,"attributes":[{"value":"/ Creates a new reader with the default buffer size of 64 KiB","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8255,"byte_end":8318,"line_start":81,"line_end":81,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8323,"byte_end":8326,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8331,"byte_end":8345,"line_start":83,"line_end":83,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8350,"byte_end":8353,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8358,"byte_end":8365,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/ use seq_io::fasta::{Reader,Record};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8370,"byte_end":8409,"line_start":86,"line_end":86,"column_start":5,"column_end":44}},{"value":"/ let fasta = b\">id\\nSEQUENCE\";","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8414,"byte_end":8447,"line_start":87,"line_end":87,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8452,"byte_end":8455,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let mut reader = Reader::new(&fasta[..]);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8460,"byte_end":8505,"line_start":89,"line_end":89,"column_start":5,"column_end":50}},{"value":"/ let record = reader.next().unwrap().unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8510,"byte_end":8559,"line_start":90,"line_end":90,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(record.id(), Ok(\"id\"))","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8564,"byte_end":8601,"line_start":91,"line_end":91,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8606,"byte_end":8613,"line_start":92,"line_end":92,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8618,"byte_end":8627,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8861,"byte_end":8874,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Reader<R, DefaultPolicy>>::with_capacity","value":"pub fn with_capacity(R, usize) -> Reader<R, DefaultPolicy>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reader with a given buffer capacity. The minimum allowed\n capacity is 3.\n","sig":null,"attributes":[{"value":"/ Creates a new reader with a given buffer capacity. The minimum allowed","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8738,"byte_end":8812,"line_start":98,"line_end":98,"column_start":5,"column_end":79}},{"value":"/ capacity is 3.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8817,"byte_end":8835,"line_start":99,"line_end":99,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8840,"byte_end":8849,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9673,"byte_end":9682,"line_start":130,"line_end":130,"column_start":12,"column_end":21},"name":"from_path","qualname":"<Reader<File, DefaultPolicy>>::from_path","value":"pub fn from_path<P: AsRef<Path>>(P) -> io::Result<Reader<File>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a reader from a file path.","sig":null,"attributes":[{"value":"/ Creates a reader from a file path.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9380,"byte_end":9418,"line_start":118,"line_end":118,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9423,"byte_end":9426,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9431,"byte_end":9445,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9450,"byte_end":9453,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9458,"byte_end":9471,"line_start":122,"line_end":122,"column_start":5,"column_end":18}},{"value":"/ use seq_io::fasta::Reader;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9476,"byte_end":9506,"line_start":123,"line_end":123,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9511,"byte_end":9514,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ let mut reader = Reader::from_path(\"seqs.fasta\").unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9519,"byte_end":9581,"line_start":125,"line_end":125,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9586,"byte_end":9589,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ // (... do something with the reader)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9594,"byte_end":9635,"line_start":127,"line_end":127,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9640,"byte_end":9647,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9652,"byte_end":9661,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9943,"byte_end":9953,"line_start":142,"line_end":142,"column_start":12,"column_end":22},"name":"set_policy","qualname":"<Reader<R, P>>::set_policy","value":"pub fn set_policy<T: BufPolicy>(Self, T) -> Reader<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reader with the given buffer policy applied\n","sig":null,"attributes":[{"value":"/ Returns a reader with the given buffer policy applied","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9860,"byte_end":9917,"line_start":140,"line_end":140,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9922,"byte_end":9931,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10331,"byte_end":10337,"line_start":155,"line_end":155,"column_start":12,"column_end":18},"name":"policy","qualname":"<Reader<R, P>>::policy","value":"pub fn policy(&Self) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Returns the `BufPolicy` of the reader\n","sig":null,"attributes":[{"value":"/ Returns the `BufPolicy` of the reader","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10264,"byte_end":10305,"line_start":153,"line_end":153,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10310,"byte_end":10319,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10900,"byte_end":10904,"line_start":174,"line_end":174,"column_start":12,"column_end":16},"name":"next","qualname":"<Reader<R, P>>::next","value":"pub fn next(&mut Self) -> Option<Result<RefRecord, Error>>","parent":null,"children":[],"decl_id":null,"docs":" Searches the next FASTA record and returns a [RefRecord](struct.RefRecord.html) that\n borrows its data from the underlying buffer of this reader.","sig":null,"attributes":[{"value":"/ Searches the next FASTA record and returns a [RefRecord](struct.RefRecord.html) that","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10389,"byte_end":10477,"line_start":159,"line_end":159,"column_start":5,"column_end":93}},{"value":"/ borrows its data from the underlying buffer of this reader.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10482,"byte_end":10545,"line_start":160,"line_end":160,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10550,"byte_end":10553,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10558,"byte_end":10572,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10577,"byte_end":10580,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10585,"byte_end":10598,"line_start":164,"line_end":164,"column_start":5,"column_end":18}},{"value":"/ use seq_io::fasta::{Reader,Record};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10603,"byte_end":10642,"line_start":165,"line_end":165,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10647,"byte_end":10650,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ let mut reader = Reader::from_path(\"seqs.fasta\").unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10655,"byte_end":10717,"line_start":167,"line_end":167,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10722,"byte_end":10725,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ while let Some(record) = reader.next() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10730,"byte_end":10774,"line_start":169,"line_end":169,"column_start":5,"column_end":49}},{"value":"/     let record = record.unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10779,"byte_end":10816,"line_start":170,"line_end":170,"column_start":5,"column_end":42}},{"value":"/     println!(\"{}\", record.id().unwrap());","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10821,"byte_end":10866,"line_start":171,"line_end":171,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10871,"byte_end":10876,"line_start":172,"line_end":172,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":10881,"byte_end":10888,"line_start":173,"line_end":173,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":11654,"byte_end":11669,"line_start":196,"line_end":196,"column_start":12,"column_end":27},"name":"read_record_set","qualname":"<Reader<R, P>>::read_record_set","value":"pub fn read_record_set(&mut Self, &mut RecordSet) -> Option<Result<(), Error>>","parent":null,"children":[],"decl_id":null,"docs":" Updates a [RecordSet](struct.RecordSet.html) with new data. The contents of the internal\n buffer are just copied over to the record set and the positions of all records are found.\n Old data will be erased. Returns `None` if the input reached its end.\n","sig":null,"attributes":[{"value":"/ Updates a [RecordSet](struct.RecordSet.html) with new data. The contents of the internal","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":11374,"byte_end":11466,"line_start":193,"line_end":193,"column_start":5,"column_end":97}},{"value":"/ buffer are just copied over to the record set and the positions of all records are found.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":11471,"byte_end":11564,"line_start":194,"line_end":194,"column_start":5,"column_end":98}},{"value":"/ Old data will be erased. Returns `None` if the input reached its end.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":11569,"byte_end":11642,"line_start":195,"line_end":195,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18717,"byte_end":18725,"line_start":423,"line_end":423,"column_start":12,"column_end":20},"name":"position","qualname":"<Reader<R, P>>::position","value":"pub fn position(&Self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current position (useful with `seek()`).\n If `next()` has not yet been called, `None` will be returned.","sig":null,"attributes":[{"value":"/ Returns the current position (useful with `seek()`).","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18060,"byte_end":18116,"line_start":397,"line_end":397,"column_start":5,"column_end":61}},{"value":"/ If `next()` has not yet been called, `None` will be returned.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18121,"byte_end":18186,"line_start":398,"line_end":398,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18191,"byte_end":18194,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18199,"byte_end":18212,"line_start":400,"line_end":400,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18217,"byte_end":18220,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18225,"byte_end":18232,"line_start":402,"line_end":402,"column_start":5,"column_end":12}},{"value":"/ # extern crate seq_io;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18237,"byte_end":18263,"line_start":403,"line_end":403,"column_start":5,"column_end":31}},{"value":"/ # fn main() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18268,"byte_end":18285,"line_start":404,"line_end":404,"column_start":5,"column_end":22}},{"value":"/ use seq_io::fasta::{Reader,Position};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18290,"byte_end":18331,"line_start":405,"line_end":405,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18336,"byte_end":18339,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let fasta = b\">id1","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18344,"byte_end":18366,"line_start":407,"line_end":407,"column_start":5,"column_end":27}},{"value":"/ ACGT","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18371,"byte_end":18379,"line_start":408,"line_end":408,"column_start":5,"column_end":13}},{"value":"/ >id2","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18384,"byte_end":18392,"line_start":409,"line_end":409,"column_start":5,"column_end":13}},{"value":"/ TGCA\";","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18397,"byte_end":18407,"line_start":410,"line_end":410,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18412,"byte_end":18415,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ let mut reader = Reader::new(&fasta[..]);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18420,"byte_end":18465,"line_start":412,"line_end":412,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18470,"byte_end":18473,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ // skip one record","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18478,"byte_end":18500,"line_start":414,"line_end":414,"column_start":5,"column_end":27}},{"value":"/ reader.next().unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18505,"byte_end":18532,"line_start":415,"line_end":415,"column_start":5,"column_end":32}},{"value":"/ // second position","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18537,"byte_end":18559,"line_start":416,"line_end":416,"column_start":5,"column_end":27}},{"value":"/ reader.next().unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18564,"byte_end":18591,"line_start":417,"line_end":417,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18596,"byte_end":18599,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(reader.position(), Some(&Position::new(3, 10)));","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18604,"byte_end":18667,"line_start":419,"line_end":419,"column_start":5,"column_end":68}},{"value":"/ # }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18672,"byte_end":18679,"line_start":420,"line_end":420,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18684,"byte_end":18691,"line_start":421,"line_end":421,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18696,"byte_end":18705,"line_start":422,"line_end":422,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19690,"byte_end":19697,"line_start":460,"line_end":460,"column_start":12,"column_end":19},"name":"records","qualname":"<Reader<R, P>>::records","value":"pub fn records(&mut Self) -> RecordsIter<, R, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over all FASTA records. The records\n are owned (`OwnedRecord`), this is therefore slower than using\n `Reader::next()`.","sig":null,"attributes":[{"value":"/ Returns a borrowed iterator over all FASTA records. The records","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18866,"byte_end":18933,"line_start":430,"line_end":430,"column_start":5,"column_end":72}},{"value":"/ are owned (`OwnedRecord`), this is therefore slower than using","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":18938,"byte_end":19004,"line_start":431,"line_end":431,"column_start":5,"column_end":71}},{"value":"/ `Reader::next()`.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19009,"byte_end":19030,"line_start":432,"line_end":432,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19035,"byte_end":19038,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19043,"byte_end":19056,"line_start":434,"line_end":434,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19061,"byte_end":19064,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19069,"byte_end":19076,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"/ # extern crate seq_io;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19081,"byte_end":19107,"line_start":437,"line_end":437,"column_start":5,"column_end":31}},{"value":"/ # fn main() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19112,"byte_end":19129,"line_start":438,"line_end":438,"column_start":5,"column_end":22}},{"value":"/ use seq_io::fasta::{Reader,OwnedRecord};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19134,"byte_end":19178,"line_start":439,"line_end":439,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19183,"byte_end":19186,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ let fasta = b\">id1","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19191,"byte_end":19213,"line_start":441,"line_end":441,"column_start":5,"column_end":27}},{"value":"/ ACGT","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19218,"byte_end":19226,"line_start":442,"line_end":442,"column_start":5,"column_end":13}},{"value":"/ >id2","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19231,"byte_end":19239,"line_start":443,"line_end":443,"column_start":5,"column_end":13}},{"value":"/ TGCA\";","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19244,"byte_end":19254,"line_start":444,"line_end":444,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19259,"byte_end":19262,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ let mut reader = Reader::new(&fasta[..]);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19267,"byte_end":19312,"line_start":446,"line_end":446,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19317,"byte_end":19320,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ let records: Result<Vec<_>, _> = reader","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19325,"byte_end":19368,"line_start":448,"line_end":448,"column_start":5,"column_end":48}},{"value":"/     .records()","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19373,"byte_end":19391,"line_start":449,"line_end":449,"column_start":5,"column_end":23}},{"value":"/     .collect();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19396,"byte_end":19415,"line_start":450,"line_end":450,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19420,"byte_end":19423,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(records.unwrap(),","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19428,"byte_end":19460,"line_start":452,"line_end":452,"column_start":5,"column_end":37}},{"value":"/     vec![","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19465,"byte_end":19478,"line_start":453,"line_end":453,"column_start":5,"column_end":18}},{"value":"/         OwnedRecord {head: b\"id1\".to_vec(), seq: b\"ACGT\".to_vec()},","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19483,"byte_end":19554,"line_start":454,"line_end":454,"column_start":5,"column_end":76}},{"value":"/         OwnedRecord {head: b\"id2\".to_vec(), seq: b\"TGCA\".to_vec()}","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19559,"byte_end":19629,"line_start":455,"line_end":455,"column_start":5,"column_end":75}},{"value":"/     ]","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19634,"byte_end":19643,"line_start":456,"line_end":456,"column_start":5,"column_end":14}},{"value":"/ );","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19648,"byte_end":19654,"line_start":457,"line_end":457,"column_start":5,"column_end":11}},{"value":"/ # }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19659,"byte_end":19666,"line_start":458,"line_end":458,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19671,"byte_end":19678,"line_start":459,"line_end":459,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19929,"byte_end":19941,"line_start":466,"line_end":466,"column_start":12,"column_end":24},"name":"into_records","qualname":"<Reader<R, P>>::into_records","value":"pub fn into_records(Self) -> RecordsIntoIter<R, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all FASTA records like `Reader::records()`,\n but with the difference that it owns the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all FASTA records like `Reader::records()`,","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19777,"byte_end":19849,"line_start":464,"line_end":464,"column_start":5,"column_end":77}},{"value":"/ but with the difference that it owns the underlying reader.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":19854,"byte_end":19917,"line_start":465,"line_end":465,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":21348,"byte_end":21352,"line_start":510,"line_end":510,"column_start":12,"column_end":16},"name":"seek","qualname":"<Reader<R, P>>::seek","value":"pub fn seek(&mut Self, &Position) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Seeks to a specified position.  Keeps the underyling buffer if the seek position is\n found within it, otherwise it has to be discarded.\n If an error was returned before, seeking to that position will return the same error.\n The same is not always true with `None`. If there is no newline character at the end of the\n file, the last record will be returned instead of `None`.","sig":null,"attributes":[{"value":"/ Seeks to a specified position.  Keeps the underyling buffer if the seek position is","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20100,"byte_end":20187,"line_start":476,"line_end":476,"column_start":5,"column_end":92}},{"value":"/ found within it, otherwise it has to be discarded.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20192,"byte_end":20246,"line_start":477,"line_end":477,"column_start":5,"column_end":59}},{"value":"/ If an error was returned before, seeking to that position will return the same error.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20251,"byte_end":20340,"line_start":478,"line_end":478,"column_start":5,"column_end":94}},{"value":"/ The same is not always true with `None`. If there is no newline character at the end of the","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20345,"byte_end":20440,"line_start":479,"line_end":479,"column_start":5,"column_end":100}},{"value":"/ file, the last record will be returned instead of `None`.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20445,"byte_end":20506,"line_start":480,"line_end":480,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20511,"byte_end":20514,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20519,"byte_end":20532,"line_start":482,"line_end":482,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20537,"byte_end":20540,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20545,"byte_end":20552,"line_start":484,"line_end":484,"column_start":5,"column_end":12}},{"value":"/ # extern crate seq_io;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20557,"byte_end":20583,"line_start":485,"line_end":485,"column_start":5,"column_end":31}},{"value":"/ # fn main() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20588,"byte_end":20605,"line_start":486,"line_end":486,"column_start":5,"column_end":22}},{"value":"/ use seq_io::fasta::{Reader,Position,OwnedRecord};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20610,"byte_end":20663,"line_start":487,"line_end":487,"column_start":5,"column_end":58}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20668,"byte_end":20692,"line_start":488,"line_end":488,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20697,"byte_end":20700,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let fasta = b\">id1","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20705,"byte_end":20727,"line_start":490,"line_end":490,"column_start":5,"column_end":27}},{"value":"/ ACGT","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20732,"byte_end":20740,"line_start":491,"line_end":491,"column_start":5,"column_end":13}},{"value":"/ >id2","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20745,"byte_end":20753,"line_start":492,"line_end":492,"column_start":5,"column_end":13}},{"value":"/ TGCA\";","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20758,"byte_end":20768,"line_start":493,"line_end":493,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20773,"byte_end":20776,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ let mut cursor = Cursor::new(&fasta[..]);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20781,"byte_end":20826,"line_start":495,"line_end":495,"column_start":5,"column_end":50}},{"value":"/ let mut reader = Reader::new(cursor);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20831,"byte_end":20872,"line_start":496,"line_end":496,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20877,"byte_end":20880,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ // read the first record and get its position","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20885,"byte_end":20934,"line_start":498,"line_end":498,"column_start":5,"column_end":54}},{"value":"/ let record1 = reader.next().unwrap().unwrap().to_owned_record();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20939,"byte_end":21007,"line_start":499,"line_end":499,"column_start":5,"column_end":73}},{"value":"/ let pos1 = reader.position().unwrap().to_owned();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":21012,"byte_end":21065,"line_start":500,"line_end":500,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":21070,"byte_end":21073,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ // read the second record","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":21078,"byte_end":21107,"line_start":502,"line_end":502,"column_start":5,"column_end":34}},{"value":"/ reader.next().unwrap().unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":21112,"byte_end":21148,"line_start":503,"line_end":503,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":21153,"byte_end":21156,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ // now seek to position of first record","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":21161,"byte_end":21204,"line_start":505,"line_end":505,"column_start":5,"column_end":48}},{"value":"/ reader.seek(&pos1);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":21209,"byte_end":21232,"line_start":506,"line_end":506,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(reader.next().unwrap().unwrap().to_owned_record(), record1);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":21237,"byte_end":21312,"line_start":507,"line_end":507,"column_start":5,"column_end":80}},{"value":"/ # }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":21317,"byte_end":21324,"line_start":508,"line_end":508,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":21329,"byte_end":21336,"line_start":509,"line_end":509,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":75},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":22152,"byte_end":22163,"line_start":531,"line_end":531,"column_start":12,"column_end":23},"name":"RecordsIter","qualname":"::fasta::RecordsIter","value":"RecordsIter {  }","parent":null,"children":[{"krate":0,"index":79}],"decl_id":null,"docs":" Borrowed iterator of `OwnedRecord`\n","sig":null,"attributes":[{"value":"/ Borrowed iterator of `OwnedRecord`","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":22102,"byte_end":22140,"line_start":530,"line_end":530,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":22609,"byte_end":22624,"line_start":551,"line_end":551,"column_start":12,"column_end":27},"name":"RecordsIntoIter","qualname":"::fasta::RecordsIntoIter","value":"RecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":91}],"decl_id":null,"docs":" Iterator of `OwnedRecord` that owns the underlying reader\n","sig":null,"attributes":[{"value":"/ Iterator of `OwnedRecord` that owns the underlying reader","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":22536,"byte_end":22597,"line_start":550,"line_end":550,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":481},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23065,"byte_end":23073,"line_start":568,"line_end":568,"column_start":12,"column_end":20},"name":"Position","qualname":"::fasta::Position","value":"Position {  }","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":483}],"decl_id":null,"docs":" Holds line number and byte offset of a FASTA record\n","sig":null,"attributes":[{"value":"/ Holds line number and byte offset of a FASTA record","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":22942,"byte_end":22997,"line_start":566,"line_end":566,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23136,"byte_end":23139,"line_start":574,"line_end":574,"column_start":12,"column_end":15},"name":"new","qualname":"<Position>::new","value":"pub fn new(u64, u64) -> Position","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23264,"byte_end":23268,"line_start":579,"line_end":579,"column_start":12,"column_end":16},"name":"line","qualname":"<Position>::line","value":"pub fn line(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Line number (starting with 1)\n","sig":null,"attributes":[{"value":"/ Line number (starting with 1)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23219,"byte_end":23252,"line_start":578,"line_end":578,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23357,"byte_end":23361,"line_start":584,"line_end":584,"column_start":12,"column_end":16},"name":"byte","qualname":"<Position>::byte","value":"pub fn byte(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Byte offset within the file\n","sig":null,"attributes":[{"value":"/ Byte offset within the file","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23314,"byte_end":23345,"line_start":583,"line_end":583,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":508},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23485,"byte_end":23487,"line_start":593,"line_end":593,"column_start":5,"column_end":7},"name":"Io","qualname":"::fasta::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":" io::Error\n","sig":null,"attributes":[{"value":"/ io::Error","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23467,"byte_end":23480,"line_start":592,"line_end":592,"column_start":5,"column_end":18}}]},{"kind":"StructVariant","id":{"krate":0,"index":511},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23557,"byte_end":23569,"line_start":595,"line_end":595,"column_start":5,"column_end":17},"name":"InvalidStart","qualname":"::fasta::Error::InvalidStart","value":"Error::InvalidStart { line, found }","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":" First non-empty line does not start with `>`\n","sig":null,"attributes":[{"value":"/ First non-empty line does not start with `>`","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23504,"byte_end":23552,"line_start":594,"line_end":594,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":514},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23884,"byte_end":23895,"line_start":603,"line_end":603,"column_start":5,"column_end":16},"name":"BufferLimit","qualname":"::fasta::Error::BufferLimit","value":"Error::BufferLimit","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":" Size limit of buffer was reached, which happens if `policy::BufPolicy::grow_to()` returned\n `None`. This does not happen with the default `struct.DoubleUntil.html` policy.\n","sig":null,"attributes":[{"value":"/ Size limit of buffer was reached, which happens if `policy::BufPolicy::grow_to()` returned","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23697,"byte_end":23791,"line_start":601,"line_end":601,"column_start":5,"column_end":99}},{"value":"/ `None`. This does not happen with the default `struct.DoubleUntil.html` policy.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23796,"byte_end":23879,"line_start":602,"line_end":602,"column_start":5,"column_end":88}}]},{"kind":"Enum","id":{"krate":0,"index":507},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23455,"byte_end":23460,"line_start":591,"line_end":591,"column_start":10,"column_end":15},"name":"Error","qualname":"::fasta::Error","value":"pub enum Error {\n\n    /// io::Error\n    Io(io::Error),\n\n    /// First non-empty line does not start with `>`\n    InvalidStart {\n        /// line number (1-based)\n        line: usize,\n        /// byte that was found instead\n        found: u8,\n    },\n\n    /// Size limit of buffer was reached, which happens if `policy::BufPolicy::grow_to()` returned\n    /// `None`. This does not happen with the default `struct.DoubleUntil.html` policy.\n    BufferLimit,\n}","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514}],"decl_id":null,"docs":" FASTA parsing error\n","sig":null,"attributes":[{"value":"/ FASTA parsing error","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23405,"byte_end":23428,"line_start":589,"line_end":589,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":113},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":25678,"byte_end":25684,"line_start":668,"line_end":668,"column_start":11,"column_end":17},"name":"Record","qualname":"::fasta::Record","value":"Record","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":128}],"decl_id":null,"docs":" FASTA record trait implemented by both `RefRecord` and `OwnedRecord`\n","sig":null,"attributes":[{"value":"/ FASTA record trait implemented by both `RefRecord` and `OwnedRecord`","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":25595,"byte_end":25667,"line_start":667,"line_end":667,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":25753,"byte_end":25757,"line_start":670,"line_end":670,"column_start":8,"column_end":12},"name":"head","qualname":"::fasta::Record::head","value":"pub fn head(&Self) -> &[u8]","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" Return the header line of the record as byte slice\n","sig":null,"attributes":[{"value":"/ Return the header line of the record as byte slice","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":25691,"byte_end":25745,"line_start":669,"line_end":669,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":25830,"byte_end":25833,"line_start":672,"line_end":672,"column_start":8,"column_end":11},"name":"seq","qualname":"::fasta::Record::seq","value":"pub fn seq(&Self) -> &[u8]","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" Return the FASTA sequence as byte slice\n","sig":null,"attributes":[{"value":"/ Return the FASTA sequence as byte slice","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":25779,"byte_end":25822,"line_start":671,"line_end":671,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":25958,"byte_end":25963,"line_start":674,"line_end":674,"column_start":8,"column_end":13},"name":"write","qualname":"::fasta::Record::write","value":"pub fn write<W: io::Write>(&Self, W) -> io::Result<()>","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" Write the record to the given `io::Write` instance. The sequence will occupy one line only.\n","sig":null,"attributes":[{"value":"/ Write the record to the given `io::Write` instance. The sequence will occupy one line only.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":25855,"byte_end":25950,"line_start":673,"line_end":673,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":26185,"byte_end":26195,"line_start":677,"line_end":677,"column_start":8,"column_end":18},"name":"write_wrap","qualname":"::fasta::Record::write_wrap","value":"pub fn write_wrap<W: io::Write>(&Self, W, usize) -> io::Result<()>","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" Write the record to the given `io::Write` instance. The sequence is wrapped to produce\n  multi-line FASTA with a maximum width specified by `wrap`.\n","sig":null,"attributes":[{"value":"/ Write the record to the given `io::Write` instance. The sequence is wrapped to produce","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":26019,"byte_end":26109,"line_start":675,"line_end":675,"column_start":5,"column_end":95}},{"value":"/  multi-line FASTA with a maximum width specified by `wrap`.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":26114,"byte_end":26177,"line_start":676,"line_end":676,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":26268,"byte_end":26276,"line_start":679,"line_end":679,"column_start":8,"column_end":16},"name":"id_bytes","qualname":"::fasta::Record::id_bytes","value":"pub fn id_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":26457,"byte_end":26459,"line_start":684,"line_end":684,"column_start":8,"column_end":10},"name":"id","qualname":"::fasta::Record::id","value":"pub fn id(&Self) -> Result<&str, Utf8Error>","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" Return the ID of the record (everything before an optional space) as string slice\n","sig":null,"attributes":[{"value":"/ Return the ID of the record (everything before an optional space) as string slice","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":26364,"byte_end":26449,"line_start":683,"line_end":683,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":26550,"byte_end":26560,"line_start":688,"line_end":688,"column_start":8,"column_end":18},"name":"desc_bytes","qualname":"::fasta::Record::desc_bytes","value":"pub fn desc_bytes(&Self) -> Option<&[u8]>","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":26759,"byte_end":26763,"line_start":693,"line_end":693,"column_start":8,"column_end":12},"name":"desc","qualname":"::fasta::Record::desc","value":"pub fn desc(&Self) -> Option<Result<&str, Utf8Error>>","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" Return the description of the record as string slice, if present. Otherwise, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Return the description of the record as string slice, if present. Otherwise, `None` is returned.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":26651,"byte_end":26751,"line_start":692,"line_end":692,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":27017,"byte_end":27030,"line_start":699,"line_end":699,"column_start":8,"column_end":21},"name":"id_desc_bytes","qualname":"::fasta::Record::id_desc_bytes","value":"pub fn id_desc_bytes(&Self) -> (&[u8], Option<&[u8]>)","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" Return both the ID and the description of the record (if present)\n This should be faster than calling `id()` and `desc()` separately.\n","sig":null,"attributes":[{"value":"/ Return both the ID and the description of the record (if present)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":26865,"byte_end":26934,"line_start":697,"line_end":697,"column_start":5,"column_end":74}},{"value":"/ This should be faster than calling `id()` and `desc()` separately.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":26939,"byte_end":27009,"line_start":698,"line_end":698,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":27326,"byte_end":27333,"line_start":706,"line_end":706,"column_start":8,"column_end":15},"name":"id_desc","qualname":"::fasta::Record::id_desc","value":"pub fn id_desc(&Self) -> Result<(&str, Option<&str>), Utf8Error>","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" Return both the ID and the description of the record (if present)\n This should be faster than calling `id()` and `desc()` separately.\n","sig":null,"attributes":[{"value":"/ Return both the ID and the description of the record (if present)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":27174,"byte_end":27243,"line_start":704,"line_end":704,"column_start":5,"column_end":74}},{"value":"/ This should be faster than calling `id()` and `desc()` separately.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":27248,"byte_end":27318,"line_start":705,"line_end":705,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":574},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":27589,"byte_end":27598,"line_start":714,"line_end":714,"column_start":12,"column_end":21},"name":"RefRecord","qualname":"::fasta::RefRecord","value":"RefRecord {  }","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577}],"decl_id":null,"docs":" A FASTA record that borrows data from a buffer.\n","sig":null,"attributes":[{"value":"/ A FASTA record that borrows data from a buffer.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":27502,"byte_end":27553,"line_start":712,"line_end":712,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":29028,"byte_end":29037,"line_start":758,"line_end":758,"column_start":12,"column_end":21},"name":"seq_lines","qualname":"<RefRecord>::seq_lines","value":"pub fn seq_lines(&Self) -> SeqLines","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all sequence lines in the data\n","sig":null,"attributes":[{"value":"/ Return an iterator over all sequence lines in the data","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":28944,"byte_end":29002,"line_start":756,"line_end":756,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":29007,"byte_end":29016,"line_start":757,"line_end":757,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":29454,"byte_end":29467,"line_start":773,"line_end":773,"column_start":12,"column_end":25},"name":"num_seq_lines","qualname":"<RefRecord>::num_seq_lines","value":"pub fn num_seq_lines(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of sequence lines.\n Equivalent to `self.seq_lines().len()`\n","sig":null,"attributes":[{"value":"/ Returns the number of sequence lines.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":29340,"byte_end":29381,"line_start":770,"line_end":770,"column_start":5,"column_end":46}},{"value":"/ Equivalent to `self.seq_lines().len()`","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":29386,"byte_end":29428,"line_start":771,"line_end":771,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":29433,"byte_end":29442,"line_start":772,"line_end":772,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":29844,"byte_end":29852,"line_start":781,"line_end":781,"column_start":12,"column_end":20},"name":"full_seq","qualname":"<RefRecord>::full_seq","value":"pub fn full_seq(&Self) -> Cow<, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the full sequence. If the sequence consists of a single line,\n then the sequence will be borrowed from the underlying buffer\n (equivalent to calling `RefRecord::seq()`). If there are multiple\n lines, an owned copy will be created (equivalent to `RefRecord::owned_seq()`).\n","sig":null,"attributes":[{"value":"/ Returns the full sequence. If the sequence consists of a single line,","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":29528,"byte_end":29601,"line_start":777,"line_end":777,"column_start":5,"column_end":78}},{"value":"/ then the sequence will be borrowed from the underlying buffer","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":29606,"byte_end":29671,"line_start":778,"line_end":778,"column_start":5,"column_end":70}},{"value":"/ (equivalent to calling `RefRecord::seq()`). If there are multiple","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":29676,"byte_end":29745,"line_start":779,"line_end":779,"column_start":5,"column_end":74}},{"value":"/ lines, an owned copy will be created (equivalent to `RefRecord::owned_seq()`).","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":29750,"byte_end":29832,"line_start":780,"line_end":780,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":30244,"byte_end":30253,"line_start":793,"line_end":793,"column_start":12,"column_end":21},"name":"owned_seq","qualname":"<RefRecord>::owned_seq","value":"pub fn owned_seq(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the sequence as owned `Vec`. **Note**: This function\n must be called in order to obtain a sequence that does not contain\n line endings (as returned by `seq()`)\n","sig":null,"attributes":[{"value":"/ Returns the sequence as owned `Vec`. **Note**: This function","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":30047,"byte_end":30111,"line_start":790,"line_end":790,"column_start":5,"column_end":69}},{"value":"/ must be called in order to obtain a sequence that does not contain","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":30116,"byte_end":30186,"line_start":791,"line_end":791,"column_start":5,"column_end":75}},{"value":"/ line endings (as returned by `seq()`)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":30191,"byte_end":30232,"line_start":792,"line_end":792,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":30468,"byte_end":30483,"line_start":802,"line_end":802,"column_start":12,"column_end":27},"name":"to_owned_record","qualname":"<RefRecord>::to_owned_record","value":"pub fn to_owned_record(&Self) -> OwnedRecord","parent":null,"children":[],"decl_id":null,"docs":" Creates an owned copy of the record.\n","sig":null,"attributes":[{"value":"/ Creates an owned copy of the record.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":30416,"byte_end":30456,"line_start":801,"line_end":801,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":30777,"byte_end":30792,"line_start":811,"line_end":811,"column_start":12,"column_end":27},"name":"write_unchanged","qualname":"<RefRecord>::write_unchanged","value":"pub fn write_unchanged<W: io::Write>(&Self, W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes a record to the given `io::Write` instance\n by just writing the unmodified input, which is faster than `RefRecord::write`\n","sig":null,"attributes":[{"value":"/ Writes a record to the given `io::Write` instance","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":30626,"byte_end":30679,"line_start":809,"line_end":809,"column_start":5,"column_end":58}},{"value":"/ by just writing the unmodified input, which is faster than `RefRecord::write`","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":30684,"byte_end":30765,"line_start":810,"line_end":810,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":146},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":31160,"byte_end":31168,"line_start":822,"line_end":822,"column_start":12,"column_end":20},"name":"SeqLines","qualname":"::fasta::SeqLines","value":"SeqLines {  }","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"decl_id":null,"docs":" Iterator over sequence the lines of a FASTA record.\n","sig":null,"attributes":[{"value":"/ Iterator over sequence the lines of a FASTA record.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":31093,"byte_end":31148,"line_start":821,"line_end":821,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":584},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":32189,"byte_end":32200,"line_start":863,"line_end":863,"column_start":12,"column_end":23},"name":"OwnedRecord","qualname":"::fasta::OwnedRecord","value":"OwnedRecord { head, seq }","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586}],"decl_id":null,"docs":" A FASTA record that ownes its data (requiring two allocations)\n","sig":null,"attributes":[{"value":"/ A FASTA record that ownes its data (requiring two allocations)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":32048,"byte_end":32114,"line_start":861,"line_end":861,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":585},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":32211,"byte_end":32215,"line_start":864,"line_end":864,"column_start":9,"column_end":13},"name":"head","qualname":"::fasta::OwnedRecord::head","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":584},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":586},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":32234,"byte_end":32237,"line_start":865,"line_end":865,"column_start":9,"column_end":12},"name":"seq","qualname":"::fasta::OwnedRecord::seq","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":584},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":647},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":32912,"byte_end":32921,"line_start":894,"line_end":894,"column_start":12,"column_end":21},"name":"RecordSet","qualname":"::fasta::RecordSet","value":"RecordSet {  }","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650}],"decl_id":null,"docs":" Set of FASTA records that owns it'P buffer\n and knows the positions of each record.\n","sig":null,"attributes":[{"value":"/ Set of FASTA records that owns it'P buffer","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":32762,"byte_end":32808,"line_start":891,"line_end":891,"column_start":1,"column_end":47}},{"value":"/ and knows the positions of each record.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":32809,"byte_end":32852,"line_start":892,"line_end":892,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":178},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":33516,"byte_end":33529,"line_start":922,"line_end":922,"column_start":12,"column_end":25},"name":"RecordSetIter","qualname":"::fasta::RecordSetIter","value":"RecordSetIter {  }","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181}],"decl_id":null,"docs":" Iterator over record sets\n","sig":null,"attributes":[{"value":"/ Iterator over record sets","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":33475,"byte_end":33504,"line_start":921,"line_end":921,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":187},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":33962,"byte_end":33970,"line_start":940,"line_end":940,"column_start":8,"column_end":16},"name":"write_to","qualname":"::fasta::write_to","value":"pub fn write_to<W>(W, &[u8], &[u8]) -> io::Result<()> where W: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Writes data (not necessarily stored in a `Record` instance) to the FASTA format.\n","sig":null,"attributes":[{"value":"/ Writes data (not necessarily stored in a `Record` instance) to the FASTA format.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":33860,"byte_end":33944,"line_start":938,"line_end":938,"column_start":1,"column_end":85}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":33945,"byte_end":33954,"line_start":939,"line_end":939,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":189},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":34282,"byte_end":34293,"line_start":951,"line_end":951,"column_start":8,"column_end":19},"name":"write_parts","qualname":"::fasta::write_parts","value":"pub fn write_parts<W>(W, &[u8], Option<&[u8]>, &[u8]) -> io::Result<()> where\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Writes data to the FASTA format. ID and description parts of the header are supplied\n separately instead of a whole header line.\n","sig":null,"attributes":[{"value":"/ Writes data to the FASTA format. ID and description parts of the header are supplied","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":34129,"byte_end":34217,"line_start":948,"line_end":948,"column_start":1,"column_end":89}},{"value":"/ separately instead of a whole header line.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":34218,"byte_end":34264,"line_start":949,"line_end":949,"column_start":1,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":34265,"byte_end":34274,"line_start":950,"line_end":950,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":191},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":34639,"byte_end":34649,"line_start":962,"line_end":962,"column_start":8,"column_end":18},"name":"write_wrap","qualname":"::fasta::write_wrap","value":"pub fn write_wrap<W>(W, &[u8], Option<&[u8]>, &[u8], usize) -> io::Result<()>\nwhere W: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Writes data to the FASTA format. Wraps the sequence to produce multi-line FASTA\n with a maximum width specified by the `wrap` parameter.\n","sig":null,"attributes":[{"value":"/ Writes data to the FASTA format. Wraps the sequence to produce multi-line FASTA","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":34478,"byte_end":34561,"line_start":959,"line_end":959,"column_start":1,"column_end":84}},{"value":"/ with a maximum width specified by the `wrap` parameter.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":34562,"byte_end":34621,"line_start":960,"line_end":960,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":34622,"byte_end":34631,"line_start":961,"line_end":961,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":34935,"byte_end":34945,"line_start":978,"line_end":978,"column_start":8,"column_end":18},"name":"write_head","qualname":"::fasta::write_head","value":"pub fn write_head<W>(W, &[u8]) -> io::Result<()> where W: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Writes only the sequence header.\n","sig":null,"attributes":[{"value":"/ Writes only the sequence header.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":34881,"byte_end":34917,"line_start":976,"line_end":976,"column_start":1,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":34918,"byte_end":34927,"line_start":977,"line_end":977,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":195},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":35195,"byte_end":35208,"line_start":989,"line_end":989,"column_start":8,"column_end":21},"name":"write_id_desc","qualname":"::fasta::write_id_desc","value":"pub fn write_id_desc<W>(W, &[u8], Option<&[u8]>) -> io::Result<()> where\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Writes only the sequence header given ID and description parts.\n","sig":null,"attributes":[{"value":"/ Writes only the sequence header given ID and description parts.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":35110,"byte_end":35177,"line_start":987,"line_end":987,"column_start":1,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":35178,"byte_end":35187,"line_start":988,"line_end":988,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":35539,"byte_end":35548,"line_start":1004,"line_end":1004,"column_start":8,"column_end":17},"name":"write_seq","qualname":"::fasta::write_seq","value":"pub fn write_seq<W>(W, &[u8]) -> io::Result<()> where W: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Writes only the sequence line.\n","sig":null,"attributes":[{"value":"/ Writes only the sequence line.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":35487,"byte_end":35521,"line_start":1002,"line_end":1002,"column_start":1,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":35522,"byte_end":35531,"line_start":1003,"line_end":1003,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":199},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":35790,"byte_end":35804,"line_start":1014,"line_end":1014,"column_start":8,"column_end":22},"name":"write_wrap_seq","qualname":"::fasta::write_wrap_seq","value":"pub fn write_wrap_seq<W>(W, &[u8], usize) -> io::Result<()> where W: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Writes the sequence line, and wraps the output to a maximum width specified by `wrap`.\n","sig":null,"attributes":[{"value":"/ Writes the sequence line, and wraps the output to a maximum width specified by `wrap`.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":35682,"byte_end":35772,"line_start":1012,"line_end":1012,"column_start":1,"column_end":91}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":35773,"byte_end":35782,"line_start":1013,"line_end":1013,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":36123,"byte_end":36137,"line_start":1028,"line_end":1028,"column_start":8,"column_end":22},"name":"write_seq_iter","qualname":"::fasta::write_seq_iter","value":"pub fn write_seq_iter<'a, W, P>(W, P) -> io::Result<()> where W: io::Write,\nP: Iterator<Item = &'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Writes the sequence line from an iterator (such as `SeqLines`)\n","sig":null,"attributes":[{"value":"/ Writes the sequence line from an iterator (such as `SeqLines`)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":36039,"byte_end":36105,"line_start":1026,"line_end":1026,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":36106,"byte_end":36115,"line_start":1027,"line_end":1027,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":36494,"byte_end":36513,"line_start":1042,"line_end":1042,"column_start":8,"column_end":27},"name":"write_wrap_seq_iter","qualname":"::fasta::write_wrap_seq_iter","value":"pub fn write_wrap_seq_iter<'a, W, P>(W, P, usize) -> io::Result<()> where\nW: io::Write, P: IntoIterator<Item = &'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Writes the sequence line from an iterator (such as `SeqLines`) and wraps the output\n to a maximum width specified by `wrap`.\n","sig":null,"attributes":[{"value":"/ Writes the sequence line from an iterator (such as `SeqLines`) and wraps the output","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":36345,"byte_end":36432,"line_start":1039,"line_end":1039,"column_start":1,"column_end":88}},{"value":"/ to a maximum width specified by `wrap`.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":36433,"byte_end":36476,"line_start":1040,"line_end":1040,"column_start":1,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":36477,"byte_end":36486,"line_start":1041,"line_end":1041,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":209},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fastq","qualname":"::fastq","value":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":1106},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":706},{"krate":0,"index":728},{"krate":0,"index":727},{"krate":0,"index":725},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":717},{"krate":0,"index":715},{"krate":0,"index":231},{"krate":0,"index":240},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":275},{"krate":0,"index":279},{"krate":0,"index":284},{"krate":0,"index":292},{"krate":0,"index":296},{"krate":0,"index":730},{"krate":0,"index":754},{"krate":0,"index":752},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":735},{"krate":0,"index":733},{"krate":0,"index":303},{"krate":0,"index":756},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":788},{"krate":0,"index":786},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":307},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":790},{"krate":0,"index":852},{"krate":0,"index":850},{"krate":0,"index":848},{"krate":0,"index":842},{"krate":0,"index":795},{"krate":0,"index":315},{"krate":0,"index":324},{"krate":0,"index":854},{"krate":0,"index":861},{"krate":0,"index":858},{"krate":0,"index":339},{"krate":0,"index":344},{"krate":0,"index":864},{"krate":0,"index":928},{"krate":0,"index":926},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":913},{"krate":0,"index":868},{"krate":0,"index":349},{"krate":0,"index":930},{"krate":0,"index":984},{"krate":0,"index":982},{"krate":0,"index":976},{"krate":0,"index":933},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":360},{"krate":0,"index":364},{"krate":0,"index":369},{"krate":0,"index":371}],"decl_id":null,"docs":" Efficient FASTQ reading and writing","sig":null,"attributes":[{"value":"/ Efficient FASTQ reading and writing","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":37253,"byte_end":37292,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":37293,"byte_end":37296,"line_start":2,"line_end":2,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":231},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":37804,"byte_end":37810,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"Reader","qualname":"::fastq::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239}],"decl_id":null,"docs":" FASTQ parser.\n","sig":null,"attributes":[{"value":"/ FASTQ parser.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":37775,"byte_end":37792,"line_start":32,"line_end":32,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38452,"byte_end":38455,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R, DefaultBufPolicy>>::new","value":"pub fn new(R) -> Reader<R, StdPolicy>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reader with the default buffer size of 64 KiB","sig":null,"attributes":[{"value":"/ Creates a new reader with the default buffer size of 64 KiB","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38076,"byte_end":38139,"line_start":46,"line_end":46,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38144,"byte_end":38147,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38152,"byte_end":38166,"line_start":48,"line_end":48,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38171,"byte_end":38174,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38179,"byte_end":38186,"line_start":50,"line_end":50,"column_start":5,"column_end":12}},{"value":"/ use seq_io::fastq::{Reader, Record};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38191,"byte_end":38231,"line_start":51,"line_end":51,"column_start":5,"column_end":45}},{"value":"/ let fastq = b\"@id\\nACGT\\n+\\nIIII\";","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38236,"byte_end":38274,"line_start":52,"line_end":52,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38279,"byte_end":38282,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ let mut reader = Reader::new(&fastq[..]);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38287,"byte_end":38332,"line_start":54,"line_end":54,"column_start":5,"column_end":50}},{"value":"/ let record = reader.next().unwrap().unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38337,"byte_end":38386,"line_start":55,"line_end":55,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(record.id(), Ok(\"id\"))","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38391,"byte_end":38428,"line_start":56,"line_end":56,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38433,"byte_end":38440,"line_start":57,"line_end":57,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38660,"byte_end":38673,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Reader<R, DefaultBufPolicy>>::with_capacity","value":"pub fn with_capacity(R, usize) -> Reader<R, StdPolicy>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reader with a given buffer capacity. The minimum allowed\n capacity is 3.\n","sig":null,"attributes":[{"value":"/ Creates a new reader with a given buffer capacity. The minimum allowed","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38551,"byte_end":38625,"line_start":62,"line_end":62,"column_start":5,"column_end":79}},{"value":"/ capacity is 3.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38630,"byte_end":38648,"line_start":63,"line_end":63,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39392,"byte_end":39401,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"from_path","qualname":"<Reader<File, DefaultBufPolicy>>::from_path","value":"pub fn from_path<P: AsRef<Path>>(P) -> io::Result<Reader<File>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a reader from a file path.","sig":null,"attributes":[{"value":"/ Creates a reader from a file path.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39113,"byte_end":39151,"line_start":78,"line_end":78,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39156,"byte_end":39159,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39164,"byte_end":39178,"line_start":80,"line_end":80,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39183,"byte_end":39186,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39191,"byte_end":39204,"line_start":82,"line_end":82,"column_start":5,"column_end":18}},{"value":"/ use seq_io::fastq::Reader;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39209,"byte_end":39239,"line_start":83,"line_end":83,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39244,"byte_end":39247,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ let mut reader = Reader::from_path(\"seqs.fastq\").unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39252,"byte_end":39314,"line_start":85,"line_end":85,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39319,"byte_end":39322,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ // (... do something with the reader)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39327,"byte_end":39368,"line_start":87,"line_end":87,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39373,"byte_end":39380,"line_start":88,"line_end":88,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39662,"byte_end":39672,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"set_policy","qualname":"<Reader<R, P>>::set_policy","value":"pub fn set_policy<T: BufPolicy>(Self, T) -> Reader<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reader with the given buffer policy applied\n","sig":null,"attributes":[{"value":"/ Returns a reader with the given buffer policy applied","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39579,"byte_end":39636,"line_start":99,"line_end":99,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39641,"byte_end":39650,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40050,"byte_end":40056,"line_start":114,"line_end":114,"column_start":12,"column_end":18},"name":"policy","qualname":"<Reader<R, P>>::policy","value":"pub fn policy(&Self) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Returns the `BufPolicy` of the reader\n","sig":null,"attributes":[{"value":"/ Returns the `BufPolicy` of the reader","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39983,"byte_end":40024,"line_start":112,"line_end":112,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40029,"byte_end":40038,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40620,"byte_end":40624,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"next","qualname":"<Reader<R, P>>::next","value":"pub fn next(&mut Self) -> Option<Result<RefRecord, Error>>","parent":null,"children":[],"decl_id":null,"docs":" Searches the next FASTQ record and returns a [RefRecord](struct.RefRecord.html) that\n borrows its data from the underlying buffer of this reader.","sig":null,"attributes":[{"value":"/ Searches the next FASTQ record and returns a [RefRecord](struct.RefRecord.html) that","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40108,"byte_end":40196,"line_start":118,"line_end":118,"column_start":5,"column_end":93}},{"value":"/ borrows its data from the underlying buffer of this reader.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40201,"byte_end":40264,"line_start":119,"line_end":119,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40269,"byte_end":40272,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40277,"byte_end":40291,"line_start":121,"line_end":121,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40296,"byte_end":40299,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40304,"byte_end":40317,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/ use seq_io::fastq::{Reader, Record};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40322,"byte_end":40362,"line_start":124,"line_end":124,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40367,"byte_end":40370,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ let mut reader = Reader::from_path(\"seqs.fastq\").unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40375,"byte_end":40437,"line_start":126,"line_end":126,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40442,"byte_end":40445,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ while let Some(record) = reader.next() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40450,"byte_end":40494,"line_start":128,"line_end":128,"column_start":5,"column_end":49}},{"value":"/     let record = record.unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40499,"byte_end":40536,"line_start":129,"line_end":129,"column_start":5,"column_end":42}},{"value":"/     println!(\"{}\", record.id().unwrap());","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40541,"byte_end":40586,"line_start":130,"line_end":130,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40591,"byte_end":40596,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":40601,"byte_end":40608,"line_start":132,"line_end":132,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":41700,"byte_end":41715,"line_start":170,"line_end":170,"column_start":12,"column_end":27},"name":"read_record_set","qualname":"<Reader<R, P>>::read_record_set","value":"pub fn read_record_set(&mut Self, &mut RecordSet) -> Option<Result<(), Error>>","parent":null,"children":[],"decl_id":null,"docs":" Updates a [RecordSet](struct.RecordSet.html) with new data. The contents of the internal\n buffer are just copied over to the record set and the positions of all records are found.\n Old data will be erased. Returns `None` if the input reached its end.\n","sig":null,"attributes":[{"value":"/ Updates a [RecordSet](struct.RecordSet.html) with new data. The contents of the internal","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":41420,"byte_end":41512,"line_start":167,"line_end":167,"column_start":5,"column_end":97}},{"value":"/ buffer are just copied over to the record set and the positions of all records are found.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":41517,"byte_end":41610,"line_start":168,"line_end":168,"column_start":5,"column_end":98}},{"value":"/ Old data will be erased. Returns `None` if the input reached its end.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":41615,"byte_end":41688,"line_start":169,"line_end":169,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50419,"byte_end":50427,"line_start":447,"line_end":447,"column_start":12,"column_end":20},"name":"position","qualname":"<Reader<R, P>>::position","value":"pub fn position(&Self) -> &Position","parent":null,"children":[],"decl_id":null,"docs":" Returns the current position (useful with `seek()`)","sig":null,"attributes":[{"value":"/ Returns the current position (useful with `seek()`)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":49792,"byte_end":49847,"line_start":418,"line_end":418,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":49852,"byte_end":49855,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":49860,"byte_end":49873,"line_start":420,"line_end":420,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":49878,"byte_end":49881,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":49886,"byte_end":49893,"line_start":422,"line_end":422,"column_start":5,"column_end":12}},{"value":"/ # extern crate seq_io;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":49898,"byte_end":49924,"line_start":423,"line_end":423,"column_start":5,"column_end":31}},{"value":"/ # fn main() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":49929,"byte_end":49946,"line_start":424,"line_end":424,"column_start":5,"column_end":22}},{"value":"/ use seq_io::fastq::{Reader, Position};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":49951,"byte_end":49993,"line_start":425,"line_end":425,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":49998,"byte_end":50001,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let fastq = b\"@id1","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50006,"byte_end":50028,"line_start":427,"line_end":427,"column_start":5,"column_end":27}},{"value":"/ ACGT","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50033,"byte_end":50041,"line_start":428,"line_end":428,"column_start":5,"column_end":13}},{"value":"/ +","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50046,"byte_end":50051,"line_start":429,"line_end":429,"column_start":5,"column_end":10}},{"value":"/ IIII","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50056,"byte_end":50064,"line_start":430,"line_end":430,"column_start":5,"column_end":13}},{"value":"/ @id2","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50069,"byte_end":50077,"line_start":431,"line_end":431,"column_start":5,"column_end":13}},{"value":"/ TGCA","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50082,"byte_end":50090,"line_start":432,"line_end":432,"column_start":5,"column_end":13}},{"value":"/ +","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50095,"byte_end":50100,"line_start":433,"line_end":433,"column_start":5,"column_end":10}},{"value":"/ IIII\";","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50105,"byte_end":50115,"line_start":434,"line_end":434,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50120,"byte_end":50123,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ let mut reader = Reader::new(&fastq[..]);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50128,"byte_end":50173,"line_start":436,"line_end":436,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50178,"byte_end":50181,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ // skip one record","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50186,"byte_end":50208,"line_start":438,"line_end":438,"column_start":5,"column_end":27}},{"value":"/ reader.next().unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50213,"byte_end":50240,"line_start":439,"line_end":439,"column_start":5,"column_end":32}},{"value":"/ // second position","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50245,"byte_end":50267,"line_start":440,"line_end":440,"column_start":5,"column_end":27}},{"value":"/ reader.next().unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50272,"byte_end":50299,"line_start":441,"line_end":441,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50304,"byte_end":50307,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(reader.position(), &Position::new(5, 17));","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50312,"byte_end":50369,"line_start":443,"line_end":443,"column_start":5,"column_end":62}},{"value":"/ # }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50374,"byte_end":50381,"line_start":444,"line_end":444,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50386,"byte_end":50393,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50398,"byte_end":50407,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51403,"byte_end":51410,"line_start":485,"line_end":485,"column_start":12,"column_end":19},"name":"records","qualname":"<Reader<R, P>>::records","value":"pub fn records(&mut Self) -> RecordsIter<, R, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over all FASTQ records. The records\n are owned (`OwnedRecord`), this is therefore slower than using\n `Reader::next()`.","sig":null,"attributes":[{"value":"/ Returns a borrowed iterator over all FASTQ records. The records","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50484,"byte_end":50551,"line_start":451,"line_end":451,"column_start":5,"column_end":72}},{"value":"/ are owned (`OwnedRecord`), this is therefore slower than using","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50556,"byte_end":50622,"line_start":452,"line_end":452,"column_start":5,"column_end":71}},{"value":"/ `Reader::next()`.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50627,"byte_end":50648,"line_start":453,"line_end":453,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50653,"byte_end":50656,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50661,"byte_end":50674,"line_start":455,"line_end":455,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50679,"byte_end":50682,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50687,"byte_end":50694,"line_start":457,"line_end":457,"column_start":5,"column_end":12}},{"value":"/ # extern crate seq_io;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50699,"byte_end":50725,"line_start":458,"line_end":458,"column_start":5,"column_end":31}},{"value":"/ # fn main() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50730,"byte_end":50747,"line_start":459,"line_end":459,"column_start":5,"column_end":22}},{"value":"/ use seq_io::fastq::{Reader, OwnedRecord};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50752,"byte_end":50797,"line_start":460,"line_end":460,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50802,"byte_end":50805,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ let fastq = b\"@id1","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50810,"byte_end":50832,"line_start":462,"line_end":462,"column_start":5,"column_end":27}},{"value":"/ ACGT","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50837,"byte_end":50845,"line_start":463,"line_end":463,"column_start":5,"column_end":13}},{"value":"/ +","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50850,"byte_end":50855,"line_start":464,"line_end":464,"column_start":5,"column_end":10}},{"value":"/ IIII","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50860,"byte_end":50868,"line_start":465,"line_end":465,"column_start":5,"column_end":13}},{"value":"/ @id2","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50873,"byte_end":50881,"line_start":466,"line_end":466,"column_start":5,"column_end":13}},{"value":"/ TGCA","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50886,"byte_end":50894,"line_start":467,"line_end":467,"column_start":5,"column_end":13}},{"value":"/ +","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50899,"byte_end":50904,"line_start":468,"line_end":468,"column_start":5,"column_end":10}},{"value":"/ IIII\";","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50909,"byte_end":50919,"line_start":469,"line_end":469,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50924,"byte_end":50927,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ let mut reader = Reader::new(&fastq[..]);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50932,"byte_end":50977,"line_start":471,"line_end":471,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50982,"byte_end":50985,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ let records: Result<Vec<_>, _> = reader","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":50990,"byte_end":51033,"line_start":473,"line_end":473,"column_start":5,"column_end":48}},{"value":"/     .records()","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51038,"byte_end":51056,"line_start":474,"line_end":474,"column_start":5,"column_end":23}},{"value":"/     .collect();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51061,"byte_end":51080,"line_start":475,"line_end":475,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51085,"byte_end":51088,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(records.unwrap(),","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51093,"byte_end":51125,"line_start":477,"line_end":477,"column_start":5,"column_end":37}},{"value":"/     vec![","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51130,"byte_end":51143,"line_start":478,"line_end":478,"column_start":5,"column_end":18}},{"value":"/         OwnedRecord {head: b\"id1\".to_vec(), seq: b\"ACGT\".to_vec(), qual: b\"IIII\".to_vec()},","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51148,"byte_end":51243,"line_start":479,"line_end":479,"column_start":5,"column_end":100}},{"value":"/         OwnedRecord {head: b\"id2\".to_vec(), seq: b\"TGCA\".to_vec(), qual: b\"IIII\".to_vec()}","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51248,"byte_end":51342,"line_start":480,"line_end":480,"column_start":5,"column_end":99}},{"value":"/     ]","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51347,"byte_end":51356,"line_start":481,"line_end":481,"column_start":5,"column_end":14}},{"value":"/ );","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51361,"byte_end":51367,"line_start":482,"line_end":482,"column_start":5,"column_end":11}},{"value":"/ # }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51372,"byte_end":51379,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51384,"byte_end":51391,"line_start":484,"line_end":484,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51642,"byte_end":51654,"line_start":491,"line_end":491,"column_start":12,"column_end":24},"name":"into_records","qualname":"<Reader<R, P>>::into_records","value":"pub fn into_records(Self) -> RecordsIntoIter<R, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all FASTQ records like `Reader::records()`,\n but with the difference that it owns the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all FASTQ records like `Reader::records()`,","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51490,"byte_end":51562,"line_start":489,"line_end":489,"column_start":5,"column_end":77}},{"value":"/ but with the difference that it owns the underlying reader.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51567,"byte_end":51630,"line_start":490,"line_end":490,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":53106,"byte_end":53110,"line_start":540,"line_end":540,"column_start":12,"column_end":16},"name":"seek","qualname":"<Reader<R, P>>::seek","value":"pub fn seek(&mut Self, &Position) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Seeks to a specified position.\n Keep the underyling buffer if the seek position is found within it, otherwise it has to be\n discarded.\n If an error was returned before, seeking to that position will return the same error.\n The same is not always true with `None`. If there is no newline character at the end of the\n file, the last record will be returned instead of `None`.","sig":null,"attributes":[{"value":"/ Seeks to a specified position.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51813,"byte_end":51847,"line_start":501,"line_end":501,"column_start":5,"column_end":39}},{"value":"/ Keep the underyling buffer if the seek position is found within it, otherwise it has to be","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51852,"byte_end":51946,"line_start":502,"line_end":502,"column_start":5,"column_end":99}},{"value":"/ discarded.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51951,"byte_end":51965,"line_start":503,"line_end":503,"column_start":5,"column_end":19}},{"value":"/ If an error was returned before, seeking to that position will return the same error.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51970,"byte_end":52059,"line_start":504,"line_end":504,"column_start":5,"column_end":94}},{"value":"/ The same is not always true with `None`. If there is no newline character at the end of the","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52064,"byte_end":52159,"line_start":505,"line_end":505,"column_start":5,"column_end":100}},{"value":"/ file, the last record will be returned instead of `None`.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52164,"byte_end":52225,"line_start":506,"line_end":506,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52230,"byte_end":52233,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52238,"byte_end":52251,"line_start":508,"line_end":508,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52256,"byte_end":52259,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52264,"byte_end":52271,"line_start":510,"line_end":510,"column_start":5,"column_end":12}},{"value":"/ # extern crate seq_io;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52276,"byte_end":52302,"line_start":511,"line_end":511,"column_start":5,"column_end":31}},{"value":"/ # fn main() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52307,"byte_end":52324,"line_start":512,"line_end":512,"column_start":5,"column_end":22}},{"value":"/ use seq_io::fastq::{Reader, Position, OwnedRecord};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52329,"byte_end":52384,"line_start":513,"line_end":513,"column_start":5,"column_end":60}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52389,"byte_end":52413,"line_start":514,"line_end":514,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52418,"byte_end":52421,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ let fastq = b\"@id1","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52426,"byte_end":52448,"line_start":516,"line_end":516,"column_start":5,"column_end":27}},{"value":"/ ACGT","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52453,"byte_end":52461,"line_start":517,"line_end":517,"column_start":5,"column_end":13}},{"value":"/ +","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52466,"byte_end":52471,"line_start":518,"line_end":518,"column_start":5,"column_end":10}},{"value":"/ IIII","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52476,"byte_end":52484,"line_start":519,"line_end":519,"column_start":5,"column_end":13}},{"value":"/ @id2","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52489,"byte_end":52497,"line_start":520,"line_end":520,"column_start":5,"column_end":13}},{"value":"/ TGCA","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52502,"byte_end":52510,"line_start":521,"line_end":521,"column_start":5,"column_end":13}},{"value":"/ +","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52515,"byte_end":52520,"line_start":522,"line_end":522,"column_start":5,"column_end":10}},{"value":"/ IIII\";","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52525,"byte_end":52535,"line_start":523,"line_end":523,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52540,"byte_end":52543,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ let mut cursor = Cursor::new(&fastq[..]);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52548,"byte_end":52593,"line_start":525,"line_end":525,"column_start":5,"column_end":50}},{"value":"/ let mut reader = Reader::new(cursor);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52598,"byte_end":52639,"line_start":526,"line_end":526,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52644,"byte_end":52647,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ // read the first record and get its position","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52652,"byte_end":52701,"line_start":528,"line_end":528,"column_start":5,"column_end":54}},{"value":"/ let record1 = reader.next().unwrap().unwrap().to_owned_record();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52706,"byte_end":52774,"line_start":529,"line_end":529,"column_start":5,"column_end":73}},{"value":"/ let pos1 = reader.position().to_owned();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52779,"byte_end":52823,"line_start":530,"line_end":530,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52828,"byte_end":52831,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ // read the second record","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52836,"byte_end":52865,"line_start":532,"line_end":532,"column_start":5,"column_end":34}},{"value":"/ reader.next().unwrap().unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52870,"byte_end":52906,"line_start":533,"line_end":533,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52911,"byte_end":52914,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ // now seek to position of first record","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52919,"byte_end":52962,"line_start":535,"line_end":535,"column_start":5,"column_end":48}},{"value":"/ reader.seek(&pos1);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52967,"byte_end":52990,"line_start":536,"line_end":536,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(reader.next().unwrap().unwrap().to_owned_record(), record1);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":52995,"byte_end":53070,"line_start":537,"line_end":537,"column_start":5,"column_end":80}},{"value":"/ # }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":53075,"byte_end":53082,"line_start":538,"line_end":538,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":53087,"byte_end":53094,"line_start":539,"line_end":539,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":279},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":53778,"byte_end":53789,"line_start":559,"line_end":559,"column_start":12,"column_end":23},"name":"RecordsIter","qualname":"::fastq::RecordsIter","value":"RecordsIter {  }","parent":null,"children":[{"krate":0,"index":283}],"decl_id":null,"docs":" Borrowed iterator of `OwnedRecord`\n","sig":null,"attributes":[{"value":"/ Borrowed iterator of `OwnedRecord`","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":53728,"byte_end":53766,"line_start":558,"line_end":558,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":292},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54238,"byte_end":54253,"line_start":579,"line_end":579,"column_start":12,"column_end":27},"name":"RecordsIntoIter","qualname":"::fastq::RecordsIntoIter","value":"RecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":295}],"decl_id":null,"docs":" Iterator of `OwnedRecord` that owns the underlying reader\n","sig":null,"attributes":[{"value":"/ Iterator of `OwnedRecord` that owns the underlying reader","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54165,"byte_end":54226,"line_start":578,"line_end":578,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":730},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54697,"byte_end":54705,"line_start":596,"line_end":596,"column_start":12,"column_end":20},"name":"Position","qualname":"::fastq::Position","value":"Position {  }","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732}],"decl_id":null,"docs":" Holds line number and byte offset of a FASTQ record\n","sig":null,"attributes":[{"value":"/ Holds line number and byte offset of a FASTQ record","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54574,"byte_end":54629,"line_start":594,"line_end":594,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54768,"byte_end":54771,"line_start":602,"line_end":602,"column_start":12,"column_end":15},"name":"new","qualname":"<Position>::new","value":"pub fn new(u64, u64) -> Position","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54896,"byte_end":54900,"line_start":607,"line_end":607,"column_start":12,"column_end":16},"name":"line","qualname":"<Position>::line","value":"pub fn line(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Line number (starting with 1)\n","sig":null,"attributes":[{"value":"/ Line number (starting with 1)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54851,"byte_end":54884,"line_start":606,"line_end":606,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54989,"byte_end":54993,"line_start":612,"line_end":612,"column_start":12,"column_end":16},"name":"byte","qualname":"<Position>::byte","value":"pub fn byte(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Byte offset within the file\n","sig":null,"attributes":[{"value":"/ Byte offset within the file","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54946,"byte_end":54977,"line_start":611,"line_end":611,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":757},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55099,"byte_end":55101,"line_start":620,"line_end":620,"column_start":5,"column_end":7},"name":"Io","qualname":"::fastq::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":756},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":760},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55170,"byte_end":55184,"line_start":622,"line_end":622,"column_start":5,"column_end":19},"name":"UnequalLengths","qualname":"::fastq::Error::UnequalLengths","value":"Error::UnequalLengths { seq, qual, pos }","parent":{"krate":0,"index":756},"children":[],"decl_id":null,"docs":" sequence and qualitiy lengths are not equal\n","sig":null,"attributes":[{"value":"/ sequence and qualitiy lengths are not equal","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55118,"byte_end":55165,"line_start":621,"line_end":621,"column_start":5,"column_end":52}}]},{"kind":"StructVariant","id":{"krate":0,"index":764},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55507,"byte_end":55519,"line_start":632,"line_end":632,"column_start":5,"column_end":17},"name":"InvalidStart","qualname":"::fastq::Error::InvalidStart","value":"Error::InvalidStart { found, pos }","parent":{"krate":0,"index":756},"children":[],"decl_id":null,"docs":" Invalid start byte encountered (expected `@`)\n","sig":null,"attributes":[{"value":"/ Invalid start byte encountered (expected `@`)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55453,"byte_end":55502,"line_start":631,"line_end":631,"column_start":5,"column_end":54}}]},{"kind":"StructVariant","id":{"krate":0,"index":767},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55740,"byte_end":55750,"line_start":639,"line_end":639,"column_start":5,"column_end":15},"name":"InvalidSep","qualname":"::fastq::Error::InvalidSep","value":"Error::InvalidSep { found, pos }","parent":{"krate":0,"index":756},"children":[],"decl_id":null,"docs":" Invalid separator byte encountered (expected `+`)\n","sig":null,"attributes":[{"value":"/ Invalid separator byte encountered (expected `+`)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55682,"byte_end":55735,"line_start":638,"line_end":638,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":770},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55907,"byte_end":55920,"line_start":646,"line_end":646,"column_start":5,"column_end":18},"name":"UnexpectedEnd","qualname":"::fastq::Error::UnexpectedEnd","value":"Error::UnexpectedEnd { pos }","parent":{"krate":0,"index":756},"children":[],"decl_id":null,"docs":" Truncated record found\n","sig":null,"attributes":[{"value":"/ Truncated record found","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55876,"byte_end":55902,"line_start":645,"line_end":645,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":772},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":56183,"byte_end":56194,"line_start":652,"line_end":652,"column_start":5,"column_end":16},"name":"BufferLimit","qualname":"::fastq::Error::BufferLimit","value":"Error::BufferLimit","parent":{"krate":0,"index":756},"children":[],"decl_id":null,"docs":" Size limit of buffer was reached, which happens if `policy::BufPolicy::grow_to()` returned\n `None`. This does not happen with the default `struct.DoubleUntil.html` policy.\n","sig":null,"attributes":[{"value":"/ Size limit of buffer was reached, which happens if `policy::BufPolicy::grow_to()` returned","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55996,"byte_end":56090,"line_start":650,"line_end":650,"column_start":5,"column_end":99}},{"value":"/ `None`. This does not happen with the default `struct.DoubleUntil.html` policy.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":56095,"byte_end":56178,"line_start":651,"line_end":651,"column_start":5,"column_end":88}}]},{"kind":"Enum","id":{"krate":0,"index":756},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55087,"byte_end":55092,"line_start":619,"line_end":619,"column_start":10,"column_end":15},"name":"Error","qualname":"::fastq::Error","value":"pub enum Error {\n    Io(io::Error),\n\n    /// sequence and qualitiy lengths are not equal\n    UnequalLengths {\n        /// Length of sequence\n        seq: usize,\n        /// Length of qualities\n        qual: usize,\n        /// Position within file.\n        /// `ErrorPosition::line` has the position of the header, not sequence/qualities\n        pos: ErrorPosition,\n    },\n\n    /// Invalid start byte encountered (expected `@`)\n    InvalidStart {\n        /// Byte found instead.\n        found: u8,\n        /// Position within file. `ErrorPosition::id` will be `None`.\n        pos: ErrorPosition,\n    },\n\n    /// Invalid separator byte encountered (expected `+`)\n    InvalidSep {\n        /// Byte found instead.\n        found: u8,\n        /// Position within file\n        pos: ErrorPosition,\n    },\n\n    /// Truncated record found\n    UnexpectedEnd {\n        /// Position within file.\n        pos: ErrorPosition,\n    },\n\n    /// Size limit of buffer was reached, which happens if `policy::BufPolicy::grow_to()` returned\n    /// `None`. This does not happen with the default `struct.DoubleUntil.html` policy.\n    BufferLimit,\n}","parent":null,"children":[{"krate":0,"index":757},{"krate":0,"index":760},{"krate":0,"index":764},{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":772}],"decl_id":null,"docs":" FASTQ parsing error\n","sig":null,"attributes":[{"value":"/ FASTQ parsing error","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":55037,"byte_end":55060,"line_start":617,"line_end":617,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":776},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":56249,"byte_end":56262,"line_start":656,"line_end":656,"column_start":12,"column_end":25},"name":"ErrorPosition","qualname":"::fastq::ErrorPosition","value":"ErrorPosition { line, id }","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":777},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":56336,"byte_end":56340,"line_start":658,"line_end":658,"column_start":9,"column_end":13},"name":"line","qualname":"::fastq::ErrorPosition::line","value":"u64","parent":{"krate":0,"index":776},"children":[],"decl_id":null,"docs":" Line number where the error occurred (starting with 1)\n","sig":null,"attributes":[{"value":"/ Line number where the error occurred (starting with 1)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":56269,"byte_end":56327,"line_start":657,"line_end":657,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":778},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":56389,"byte_end":56391,"line_start":660,"line_end":660,"column_start":9,"column_end":11},"name":"id","qualname":"::fastq::ErrorPosition::id","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":776},"children":[],"decl_id":null,"docs":" ID of record if available\n","sig":null,"attributes":[{"value":"/ ID of record if available","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":56351,"byte_end":56380,"line_start":659,"line_end":659,"column_start":5,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":324},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59040,"byte_end":59046,"line_start":755,"line_end":755,"column_start":11,"column_end":17},"name":"Record","qualname":"::fastq::Record","value":"Record","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":337}],"decl_id":null,"docs":" FASTQ record trait implemented by both `RefRecord` and `OwnedRecord`\n","sig":null,"attributes":[{"value":"/ FASTQ record trait implemented by both `RefRecord` and `OwnedRecord`","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":58957,"byte_end":59029,"line_start":754,"line_end":754,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59115,"byte_end":59119,"line_start":757,"line_end":757,"column_start":8,"column_end":12},"name":"head","qualname":"::fastq::Record::head","value":"pub fn head(&Self) -> &[u8]","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Return the header line of the record as byte slice\n","sig":null,"attributes":[{"value":"/ Return the header line of the record as byte slice","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59053,"byte_end":59107,"line_start":756,"line_end":756,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59192,"byte_end":59195,"line_start":759,"line_end":759,"column_start":8,"column_end":11},"name":"seq","qualname":"::fastq::Record::seq","value":"pub fn seq(&Self) -> &[u8]","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Return the FASTQ sequence as byte slice\n","sig":null,"attributes":[{"value":"/ Return the FASTQ sequence as byte slice","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59141,"byte_end":59184,"line_start":758,"line_end":758,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59269,"byte_end":59273,"line_start":761,"line_end":761,"column_start":8,"column_end":12},"name":"qual","qualname":"::fastq::Record::qual","value":"pub fn qual(&Self) -> &[u8]","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Return the FASTQ qualities as byte slice\n","sig":null,"attributes":[{"value":"/ Return the FASTQ qualities as byte slice","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59217,"byte_end":59261,"line_start":760,"line_end":760,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59299,"byte_end":59307,"line_start":763,"line_end":763,"column_start":8,"column_end":16},"name":"id_bytes","qualname":"::fastq::Record::id_bytes","value":"pub fn id_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59488,"byte_end":59490,"line_start":768,"line_end":768,"column_start":8,"column_end":10},"name":"id","qualname":"::fastq::Record::id","value":"pub fn id(&Self) -> Result<&str, Utf8Error>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Return the ID of the record (everything before an optional space) as string slice\n","sig":null,"attributes":[{"value":"/ Return the ID of the record (everything before an optional space) as string slice","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59395,"byte_end":59480,"line_start":767,"line_end":767,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59581,"byte_end":59591,"line_start":772,"line_end":772,"column_start":8,"column_end":18},"name":"desc_bytes","qualname":"::fastq::Record::desc_bytes","value":"pub fn desc_bytes(&Self) -> Option<&[u8]>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59790,"byte_end":59794,"line_start":777,"line_end":777,"column_start":8,"column_end":12},"name":"desc","qualname":"::fastq::Record::desc","value":"pub fn desc(&Self) -> Option<Result<&str, Utf8Error>>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Return the description of the record as string slice, if present. Otherwise, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Return the description of the record as string slice, if present. Otherwise, `None` is returned.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59682,"byte_end":59782,"line_start":776,"line_end":776,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":60048,"byte_end":60061,"line_start":783,"line_end":783,"column_start":8,"column_end":21},"name":"id_desc_bytes","qualname":"::fastq::Record::id_desc_bytes","value":"pub fn id_desc_bytes(&Self) -> (&[u8], Option<&[u8]>)","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Return both the ID and the description of the record (if present)\n This should be faster than calling `id()` and `desc()` separately.\n","sig":null,"attributes":[{"value":"/ Return both the ID and the description of the record (if present)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59896,"byte_end":59965,"line_start":781,"line_end":781,"column_start":5,"column_end":74}},{"value":"/ This should be faster than calling `id()` and `desc()` separately.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":59970,"byte_end":60040,"line_start":782,"line_end":782,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":60357,"byte_end":60364,"line_start":790,"line_end":790,"column_start":8,"column_end":15},"name":"id_desc","qualname":"::fastq::Record::id_desc","value":"pub fn id_desc(&Self) -> Result<(&str, Option<&str>), Utf8Error>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Return both the ID and the description of the record (if present)\n This should be faster than calling `id()` and `desc()` separately.\n","sig":null,"attributes":[{"value":"/ Return both the ID and the description of the record (if present)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":60205,"byte_end":60274,"line_start":788,"line_end":788,"column_start":5,"column_end":74}},{"value":"/ This should be faster than calling `id()` and `desc()` separately.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":60279,"byte_end":60349,"line_start":789,"line_end":789,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":60610,"byte_end":60615,"line_start":797,"line_end":797,"column_start":8,"column_end":13},"name":"write","qualname":"::fastq::Record::write","value":"pub fn write<W: io::Write>(&Self, W) -> io::Result<()>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Writes a record to the given `io::Write` instance\n","sig":null,"attributes":[{"value":"/ Writes a record to the given `io::Write` instance","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":60535,"byte_end":60588,"line_start":795,"line_end":795,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":60593,"byte_end":60602,"line_start":796,"line_end":796,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":854},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":60826,"byte_end":60835,"line_start":804,"line_end":804,"column_start":12,"column_end":21},"name":"RefRecord","qualname":"::fastq::RefRecord","value":"RefRecord {  }","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857}],"decl_id":null,"docs":" A FASTQ record that borrows data from a buffer\n","sig":null,"attributes":[{"value":"/ A FASTQ record that borrows data from a buffer","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":60740,"byte_end":60790,"line_start":802,"line_end":802,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":61256,"byte_end":61271,"line_start":828,"line_end":828,"column_start":12,"column_end":27},"name":"to_owned_record","qualname":"<RefRecord>::to_owned_record","value":"pub fn to_owned_record(&Self) -> OwnedRecord","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":61235,"byte_end":61244,"line_start":827,"line_end":827,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":61622,"byte_end":61637,"line_start":839,"line_end":839,"column_start":12,"column_end":27},"name":"write_unchanged","qualname":"<RefRecord>::write_unchanged","value":"pub fn write_unchanged<W: io::Write>(&Self, W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes a record to the given `io::Write` instance\n by just writing the unmodified input, which is faster than `RefRecord::write`\n","sig":null,"attributes":[{"value":"/ Writes a record to the given `io::Write` instance","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":61457,"byte_end":61510,"line_start":836,"line_end":836,"column_start":5,"column_end":58}},{"value":"/ by just writing the unmodified input, which is faster than `RefRecord::write`","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":61515,"byte_end":61596,"line_start":837,"line_end":837,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":61601,"byte_end":61610,"line_start":838,"line_end":838,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":864},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":61977,"byte_end":61988,"line_start":848,"line_end":848,"column_start":12,"column_end":23},"name":"OwnedRecord","qualname":"::fastq::OwnedRecord","value":"OwnedRecord { head, seq, qual }","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867}],"decl_id":null,"docs":" A FASTQ record that ownes its data (requires allocations)\n","sig":null,"attributes":[{"value":"/ A FASTQ record that ownes its data (requires allocations)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":61841,"byte_end":61902,"line_start":846,"line_end":846,"column_start":1,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":865},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":61999,"byte_end":62003,"line_start":849,"line_end":849,"column_start":9,"column_end":13},"name":"head","qualname":"::fastq::OwnedRecord::head","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":866},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":62022,"byte_end":62025,"line_start":850,"line_end":850,"column_start":9,"column_end":12},"name":"seq","qualname":"::fastq::OwnedRecord::seq","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":867},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":62044,"byte_end":62048,"line_start":851,"line_end":851,"column_start":9,"column_end":13},"name":"qual","qualname":"::fastq::OwnedRecord::qual","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":930},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":62450,"byte_end":62459,"line_start":872,"line_end":872,"column_start":12,"column_end":21},"name":"RecordSet","qualname":"::fastq::RecordSet","value":"RecordSet {  }","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":932}],"decl_id":null,"docs":" Set of FASTQ records that owns it's buffer\n and knows the positions of each record.\n","sig":null,"attributes":[{"value":"/ Set of FASTQ records that owns it's buffer","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":62300,"byte_end":62346,"line_start":869,"line_end":869,"column_start":1,"column_end":47}},{"value":"/ and knows the positions of each record.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":62347,"byte_end":62390,"line_start":870,"line_end":870,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":360},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":63012,"byte_end":63025,"line_start":898,"line_end":898,"column_start":12,"column_end":25},"name":"RecordSetIter","qualname":"::fastq::RecordSetIter","value":"RecordSetIter {  }","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363}],"decl_id":null,"docs":" Iterator over record sets\n","sig":null,"attributes":[{"value":"/ Iterator over record sets","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":62971,"byte_end":63000,"line_start":897,"line_end":897,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":369},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":63460,"byte_end":63468,"line_start":916,"line_end":916,"column_start":8,"column_end":16},"name":"write_to","qualname":"::fastq::write_to","value":"pub fn write_to<W: io::Write>(W, &[u8], &[u8], &[u8]) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for writing data (not necessarily stored in a `Record` instance)\n to the FASTQ format\n","sig":null,"attributes":[{"value":"/ Helper function for writing data (not necessarily stored in a `Record` instance)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":63344,"byte_end":63428,"line_start":914,"line_end":914,"column_start":1,"column_end":85}},{"value":"/ to the FASTQ format","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":63429,"byte_end":63452,"line_start":915,"line_end":915,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":371},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":64016,"byte_end":64027,"line_start":935,"line_end":935,"column_start":8,"column_end":19},"name":"write_parts","qualname":"::fastq::write_parts","value":"pub fn write_parts<W: io::Write>(W, &[u8], Option<&[u8]>, &[u8], &[u8])\n-> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for writing data (not necessarily stored in a `Record` instance)\n to the FASTQ format. The ID and description parts of the header are supplied separately\n instead of a whole header line\n","sig":null,"attributes":[{"value":"/ Helper function for writing data (not necessarily stored in a `Record` instance)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":63797,"byte_end":63881,"line_start":932,"line_end":932,"column_start":1,"column_end":85}},{"value":"/ to the FASTQ format. The ID and description parts of the header are supplied separately","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":63882,"byte_end":63973,"line_start":933,"line_end":933,"column_start":1,"column_end":92}},{"value":"/ instead of a whole header line","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":63974,"byte_end":64008,"line_start":934,"line_end":934,"column_start":1,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":373},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parallel","qualname":"::parallel","value":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":1112},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":383},{"krate":0,"index":391},{"krate":0,"index":406},{"krate":0,"index":413},{"krate":0,"index":986},{"krate":0,"index":997},{"krate":0,"index":1016},{"krate":0,"index":1027},{"krate":0,"index":420},{"krate":0,"index":426},{"krate":0,"index":430},{"krate":0,"index":436},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":452},{"krate":0,"index":453}],"decl_id":null,"docs":" Experiments with parallel processing","sig":null,"attributes":[{"value":"/ Experiments with parallel processing","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64474,"byte_end":64514,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64515,"byte_end":64518,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The provided functions focus on the possibility of","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64519,"byte_end":64573,"line_start":3,"line_end":3,"column_start":1,"column_end":55}},{"value":"/ returning results while the parser proceeds. Sequences are processesd in","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64574,"byte_end":64650,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/ batches (`RecordSet`) because sending across channels has a performance","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64651,"byte_end":64726,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ impact. FASTA/FASTQ records can be accessed in both the 'worker' function and","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64727,"byte_end":64808,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"/ (after processing) a function running in the main thread.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64809,"byte_end":64870,"line_start":7,"line_end":7,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64871,"byte_end":64874,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Search first occurrence of a sequence pattern","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64875,"byte_end":64926,"line_start":9,"line_end":9,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64927,"byte_end":64930,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64931,"byte_end":64944,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/ use seq_io::fastq::{Reader,Record};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64945,"byte_end":64984,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/ use seq_io::parallel::read_parallel;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":64985,"byte_end":65025,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65026,"byte_end":65029,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ let reader = Reader::from_path(\"seqs.fastq\").unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65030,"byte_end":65088,"line_start":15,"line_end":15,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65089,"byte_end":65092,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ read_parallel(reader, 4, 2, |record_set| {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65093,"byte_end":65139,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"/     // this function does the heavy work","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65140,"byte_end":65184,"line_start":18,"line_end":18,"column_start":1,"column_end":45}},{"value":"/     for (i, record) in record_set.into_iter().enumerate() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65185,"byte_end":65248,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/         // this is not very efficient code, just for demonstration","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65249,"byte_end":65319,"line_start":20,"line_end":20,"column_start":1,"column_end":71}},{"value":"/         if let Some(pos) = record.seq().windows(3).position(|s| s == b\"AAA\") {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65320,"byte_end":65402,"line_start":21,"line_end":21,"column_start":1,"column_end":83}},{"value":"/             return Some((i, pos));","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65403,"byte_end":65441,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/         }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65442,"byte_end":65455,"line_start":23,"line_end":23,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65456,"byte_end":65465,"line_start":24,"line_end":24,"column_start":1,"column_end":10}},{"value":"/     None","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65466,"byte_end":65478,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/ }, |record_sets| {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65479,"byte_end":65501,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/     // This function runs in the main thread. It provides a streaming iterator over","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65502,"byte_end":65589,"line_start":27,"line_end":27,"column_start":1,"column_end":88}},{"value":"/     // record sets and the corresponding return values from the worker function","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65590,"byte_end":65673,"line_start":28,"line_end":28,"column_start":1,"column_end":84}},{"value":"/     // (not necessarily in the same order as in the file)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65674,"byte_end":65735,"line_start":29,"line_end":29,"column_start":1,"column_end":62}},{"value":"/     while let Some(result) = record_sets.next() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65736,"byte_end":65789,"line_start":30,"line_end":30,"column_start":1,"column_end":54}},{"value":"/         let (record_set, found) = result.unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65790,"byte_end":65844,"line_start":31,"line_end":31,"column_start":1,"column_end":55}},{"value":"/         if let Some((i, pos)) = found {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65845,"byte_end":65888,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/             let record = record_set.into_iter().nth(i).unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65889,"byte_end":65957,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/             println!(\"Found AAA in record {} at position {}\", record.id().unwrap(), pos);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":65958,"byte_end":66051,"line_start":34,"line_end":34,"column_start":1,"column_end":94}},{"value":"/              // this will also stop the worker threads, although with some delay","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66052,"byte_end":66136,"line_start":35,"line_end":35,"column_start":1,"column_end":85}},{"value":"/             return;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66137,"byte_end":66160,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"/         }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66161,"byte_end":66174,"line_start":37,"line_end":37,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66175,"byte_end":66184,"line_start":38,"line_end":38,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66185,"byte_end":66192,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66193,"byte_end":66200,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66201,"byte_end":66204,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Per-record processsing","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66205,"byte_end":66233,"line_start":42,"line_end":42,"column_start":1,"column_end":29}},{"value":"/ The `parallel_fasta` / `parallel_fastq` functions are designed to efficiently pass","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66234,"byte_end":66320,"line_start":43,"line_end":43,"column_start":1,"column_end":87}},{"value":"/ results for **each record** to the main thread without having to care about record sets.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66321,"byte_end":66413,"line_start":44,"line_end":44,"column_start":1,"column_end":93}},{"value":"/ This example filters sequences by the occurrence of a pattern:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66414,"byte_end":66480,"line_start":45,"line_end":45,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66481,"byte_end":66484,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66485,"byte_end":66498,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/ use seq_io::fastq::{Reader,Record};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66499,"byte_end":66538,"line_start":48,"line_end":48,"column_start":1,"column_end":40}},{"value":"/ use seq_io::parallel::parallel_fastq;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66539,"byte_end":66580,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66581,"byte_end":66603,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufWriter;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66604,"byte_end":66631,"line_start":51,"line_end":51,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66632,"byte_end":66635,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ let reader = Reader::from_path(\"seqs.fastq\").unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66636,"byte_end":66694,"line_start":53,"line_end":53,"column_start":1,"column_end":59}},{"value":"/ let mut writer = BufWriter::new(File::create(\"filtered.fastq\").unwrap());","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66695,"byte_end":66772,"line_start":54,"line_end":54,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66773,"byte_end":66776,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ parallel_fastq(reader, 4, 2,","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66777,"byte_end":66809,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/     |record, found| { // runs in worker","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66810,"byte_end":66853,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/         *found = record.seq().windows(3).position(|s| s == b\"AAA\").is_some();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66854,"byte_end":66935,"line_start":58,"line_end":58,"column_start":1,"column_end":82}},{"value":"/     },","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66936,"byte_end":66946,"line_start":59,"line_end":59,"column_start":1,"column_end":11}},{"value":"/     |record, found| { // runs in main thread","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66947,"byte_end":66995,"line_start":60,"line_end":60,"column_start":1,"column_end":49}},{"value":"/         if *found {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":66996,"byte_end":67019,"line_start":61,"line_end":61,"column_start":1,"column_end":24}},{"value":"/             record.write(&mut writer).unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67020,"byte_end":67071,"line_start":62,"line_end":62,"column_start":1,"column_end":52}},{"value":"/         }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67072,"byte_end":67085,"line_start":63,"line_end":63,"column_start":1,"column_end":14}},{"value":"/         // Some(value) will stop the reader, and the value will be returned.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67086,"byte_end":67166,"line_start":64,"line_end":64,"column_start":1,"column_end":81}},{"value":"/         // In the case of never stopping, we need to give the compiler a hint about the","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67167,"byte_end":67258,"line_start":65,"line_end":65,"column_start":1,"column_end":92}},{"value":"/         // type parameter, thus the special 'turbofish' notation is needed,","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67259,"byte_end":67338,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/         // hoping on progress here: https://github.com/rust-lang/rust/issues/27336","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67339,"byte_end":67425,"line_start":67,"line_end":67,"column_start":1,"column_end":87}},{"value":"/         None::<()>","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67426,"byte_end":67448,"line_start":68,"line_end":68,"column_start":1,"column_end":23}},{"value":"/ }).unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67449,"byte_end":67465,"line_start":69,"line_end":69,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67466,"byte_end":67473,"line_start":70,"line_end":70,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":379},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67608,"byte_end":67614,"line_start":80,"line_end":80,"column_start":11,"column_end":17},"name":"Reader","qualname":"::parallel::Reader","value":"Reader","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":380},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67626,"byte_end":67633,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"name":"DataSet","qualname":"::parallel::Reader::DataSet","value":"type DataSet: Send;","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":381},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67650,"byte_end":67653,"line_start":82,"line_end":82,"column_start":10,"column_end":13},"name":"Err","qualname":"::parallel::Reader::Err","value":"type Err: Send;","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67668,"byte_end":67677,"line_start":83,"line_end":83,"column_start":8,"column_end":17},"name":"fill_data","qualname":"::parallel::Reader::fill_data","value":"pub fn fill_data(&mut Self, &mut Self::DataSet)\n-> Option<Result<(), Self::Err>>","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":383},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":67761,"byte_end":67774,"line_start":86,"line_end":86,"column_start":8,"column_end":21},"name":"read_parallel","qualname":"::parallel::read_parallel","value":"pub fn read_parallel<R, O, W, F, Out>(R, u32, usize, W, F) -> Out where\nR: Reader + Send, R::DataSet: Default, O: Default + Send, W: Send + Sync +\nFn(&mut R::DataSet) -> O,\nF: FnMut(&mut ParallelRecordsets<R::DataSet, R::Err, O>) -> Out","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":391},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":68454,"byte_end":68472,"line_start":113,"line_end":113,"column_start":8,"column_end":26},"name":"read_parallel_init","qualname":"::parallel::read_parallel_init","value":"pub fn read_parallel_init<R, E, Ri, Er, O, Di, Ed, W, F,\n                          Out>(u32, usize, Ri, Di, W, F) -> Result<Out, E>\nwhere R: Reader, Ri: Send + FnOnce() -> Result<R, Er>, Er: Send, E: From<Er> +\nFrom<Ed>, O: Send, Di: Send + Sync + FnMut() -> Result<R::DataSet, Ed>,\nW: Send + Sync + Fn(&mut R::DataSet) -> O,\nF: FnOnce(&mut ParallelRecordsets<R::DataSet, R::Err, O>) -> Out","parent":null,"children":[],"decl_id":null,"docs":" This function allows initiating the reader and datasets using a closure.\n This is more flexible and allows readers not to be `Send`\n","sig":null,"attributes":[{"value":"/ This function allows initiating the reader and datasets using a closure.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":68308,"byte_end":68384,"line_start":111,"line_end":111,"column_start":1,"column_end":77}},{"value":"/ This is more flexible and allows readers not to be `Send`","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":68385,"byte_end":68446,"line_start":112,"line_end":112,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":406},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":71144,"byte_end":71162,"line_start":202,"line_end":202,"column_start":12,"column_end":30},"name":"ParallelRecordsets","qualname":"::parallel::ParallelRecordsets","value":"ParallelRecordsets {  }","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":71443,"byte_end":71447,"line_start":219,"line_end":219,"column_start":12,"column_end":16},"name":"next","qualname":"<ParallelRecordsets<R, E, O>>::next","value":"pub fn next(&mut Self) -> Option<Result<(&mut R, O), E>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":986},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76417,"byte_end":76431,"line_start":336,"line_end":336,"column_start":5,"column_end":19},"name":"parallel_fasta","qualname":"::parallel::parallel_fasta","value":"pub fn parallel_fasta<R, D, W, F, Out>(fasta::Reader<R>, u32, usize, W, F)\n-> Result<Option<Out>, fasta::Error> where R: io::Read + Send, D: Default +\nSend, W: Send + Sync + Fn(fasta::RefRecord, &mut D) -> (),\nF: FnMut(fasta::RefRecord, &mut D) -> Option<Out>","parent":null,"children":[],"decl_id":null,"docs":" Function reading records in a different thread.\n processing them in another worker thread\n and finally returning the results to the main thread.","sig":null,"attributes":[{"value":"/ Function reading records in a different thread.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72129,"byte_end":72180,"line_start":236,"line_end":236,"column_start":9,"column_end":60}},{"value":"/ processing them in another worker thread","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72189,"byte_end":72233,"line_start":237,"line_end":237,"column_start":9,"column_end":53}},{"value":"/ and finally returning the results to the main thread.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72242,"byte_end":72299,"line_start":238,"line_end":238,"column_start":9,"column_end":66}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72308,"byte_end":72311,"line_start":239,"line_end":239,"column_start":9,"column_end":12}},{"value":"/ The output is passed around between threads, allowing","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72320,"byte_end":72377,"line_start":240,"line_end":240,"column_start":9,"column_end":66}},{"value":"/ allocations to be 'recycled'. This also means, that the","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72386,"byte_end":72445,"line_start":241,"line_end":241,"column_start":9,"column_end":68}},{"value":"/ data must implement `Default`, and data handled to the 'work'","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72454,"byte_end":72519,"line_start":242,"line_end":242,"column_start":9,"column_end":74}},{"value":"/ function will receive 'old' data from earlier records which","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72528,"byte_end":72591,"line_start":243,"line_end":243,"column_start":9,"column_end":72}},{"value":"/ has to be overwritten.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72600,"byte_end":72626,"line_start":244,"line_end":244,"column_start":9,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":997},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76437,"byte_end":76456,"line_start":337,"line_end":337,"column_start":5,"column_end":24},"name":"parallel_fasta_init","qualname":"::parallel::parallel_fasta_init","value":"pub fn parallel_fasta_init<Ri, E, R, Er, Di, D, Ed, Si, S, Es, W, F,\n                           Out>(u32, usize, Ri, Di, Si, W, F)\n-> Result<Option<Out>, E> where R: io::Read, Ri: Send + FnOnce() ->\nResult<fasta::Reader<R>, Er>, Er: Send, Ed: Send, E: From<fasta::Error> +\nFrom<Er> + From<Ed> + From<Es>, Di: Fn() -> Result<D, Ed> + Send + Sync,\nD: Send, Si: Fn() -> Result<S, Es> + Send + Sync, S: Send, W: Send + Sync +\nFn(fasta::RefRecord, &mut D, &mut S) -> (),\nF: FnMut(fasta::RefRecord, &mut D, &mut S) -> Option<Out>","parent":null,"children":[],"decl_id":null,"docs":" More customisable function doing per-record processing with\n closures for initialization and moer options.","sig":null,"attributes":[{"value":"/ More customisable function doing per-record processing with","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73405,"byte_end":73468,"line_start":269,"line_end":269,"column_start":9,"column_end":72}},{"value":"/ closures for initialization and moer options.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73477,"byte_end":73526,"line_start":270,"line_end":270,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73535,"byte_end":73538,"line_start":271,"line_end":271,"column_start":9,"column_end":12}},{"value":"/ The reader is lazily initialized in a closure (`reader_init`) and therefore does not","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73547,"byte_end":73635,"line_start":272,"line_end":272,"column_start":9,"column_end":97}},{"value":"/ need to implement `Send`. There is also an initializer for the output data","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73644,"byte_end":73722,"line_start":273,"line_end":273,"column_start":9,"column_end":87}},{"value":"/ for each record, therefore the type is not required to implement.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73731,"byte_end":73800,"line_start":274,"line_end":274,"column_start":9,"column_end":78}},{"value":"/ `Default` (`record_data_init`). Finally, each record set can have","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73809,"byte_end":73878,"line_start":275,"line_end":275,"column_start":9,"column_end":78}},{"value":"/ its own data (kind of thread local data, but actually passed around","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73887,"byte_end":73958,"line_start":276,"line_end":276,"column_start":9,"column_end":80}},{"value":"/ with the record set) (`rset_data_init`).","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73967,"byte_end":74011,"line_start":277,"line_end":277,"column_start":9,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":1016},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76579,"byte_end":76593,"line_start":346,"line_end":346,"column_start":5,"column_end":19},"name":"parallel_fastq","qualname":"::parallel::parallel_fastq","value":"pub fn parallel_fastq<R, D, W, F, Out>(fastq::Reader<R>, u32, usize, W, F)\n-> Result<Option<Out>, fastq::Error> where R: io::Read + Send, D: Default +\nSend, W: Send + Sync + Fn(fastq::RefRecord, &mut D) -> (),\nF: FnMut(fastq::RefRecord, &mut D) -> Option<Out>","parent":null,"children":[],"decl_id":null,"docs":" Function reading records in a different thread.\n processing them in another worker thread\n and finally returning the results to the main thread.","sig":null,"attributes":[{"value":"/ Function reading records in a different thread.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72129,"byte_end":72180,"line_start":236,"line_end":236,"column_start":9,"column_end":60}},{"value":"/ processing them in another worker thread","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72189,"byte_end":72233,"line_start":237,"line_end":237,"column_start":9,"column_end":53}},{"value":"/ and finally returning the results to the main thread.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72242,"byte_end":72299,"line_start":238,"line_end":238,"column_start":9,"column_end":66}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72308,"byte_end":72311,"line_start":239,"line_end":239,"column_start":9,"column_end":12}},{"value":"/ The output is passed around between threads, allowing","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72320,"byte_end":72377,"line_start":240,"line_end":240,"column_start":9,"column_end":66}},{"value":"/ allocations to be 'recycled'. This also means, that the","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72386,"byte_end":72445,"line_start":241,"line_end":241,"column_start":9,"column_end":68}},{"value":"/ data must implement `Default`, and data handled to the 'work'","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72454,"byte_end":72519,"line_start":242,"line_end":242,"column_start":9,"column_end":74}},{"value":"/ function will receive 'old' data from earlier records which","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72528,"byte_end":72591,"line_start":243,"line_end":243,"column_start":9,"column_end":72}},{"value":"/ has to be overwritten.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":72600,"byte_end":72626,"line_start":244,"line_end":244,"column_start":9,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":1027},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76599,"byte_end":76618,"line_start":347,"line_end":347,"column_start":5,"column_end":24},"name":"parallel_fastq_init","qualname":"::parallel::parallel_fastq_init","value":"pub fn parallel_fastq_init<Ri, E, R, Er, Di, D, Ed, Si, S, Es, W, F,\n                           Out>(u32, usize, Ri, Di, Si, W, F)\n-> Result<Option<Out>, E> where R: io::Read, Ri: Send + FnOnce() ->\nResult<fastq::Reader<R>, Er>, Er: Send, Ed: Send, E: From<fastq::Error> +\nFrom<Er> + From<Ed> + From<Es>, Di: Fn() -> Result<D, Ed> + Send + Sync,\nD: Send, Si: Fn() -> Result<S, Es> + Send + Sync, S: Send, W: Send + Sync +\nFn(fastq::RefRecord, &mut D, &mut S) -> (),\nF: FnMut(fastq::RefRecord, &mut D, &mut S) -> Option<Out>","parent":null,"children":[],"decl_id":null,"docs":" More customisable function doing per-record processing with\n closures for initialization and moer options.","sig":null,"attributes":[{"value":"/ More customisable function doing per-record processing with","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73405,"byte_end":73468,"line_start":269,"line_end":269,"column_start":9,"column_end":72}},{"value":"/ closures for initialization and moer options.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73477,"byte_end":73526,"line_start":270,"line_end":270,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73535,"byte_end":73538,"line_start":271,"line_end":271,"column_start":9,"column_end":12}},{"value":"/ The reader is lazily initialized in a closure (`reader_init`) and therefore does not","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73547,"byte_end":73635,"line_start":272,"line_end":272,"column_start":9,"column_end":97}},{"value":"/ need to implement `Send`. There is also an initializer for the output data","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73644,"byte_end":73722,"line_start":273,"line_end":273,"column_start":9,"column_end":87}},{"value":"/ for each record, therefore the type is not required to implement.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73731,"byte_end":73800,"line_start":274,"line_end":274,"column_start":9,"column_end":78}},{"value":"/ `Default` (`record_data_init`). Finally, each record set can have","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73809,"byte_end":73878,"line_start":275,"line_end":275,"column_start":9,"column_end":78}},{"value":"/ its own data (kind of thread local data, but actually passed around","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73887,"byte_end":73958,"line_start":276,"line_end":276,"column_start":9,"column_end":80}},{"value":"/ with the record set) (`rset_data_init`).","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":73967,"byte_end":74011,"line_start":277,"line_end":277,"column_start":9,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":420},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77675,"byte_end":77689,"line_start":381,"line_end":381,"column_start":12,"column_end":26},"name":"ReusableReader","qualname":"::parallel::ReusableReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper for `parallel::Reader` instances allowing\n the output to be reused in order to save allocations.\n Used by `parallel_fasta`/`parallel_fastq`","sig":null,"attributes":[{"value":"/ Wrapper for `parallel::Reader` instances allowing","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76714,"byte_end":76767,"line_start":355,"line_end":355,"column_start":1,"column_end":54}},{"value":"/ the output to be reused in order to save allocations.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76768,"byte_end":76825,"line_start":356,"line_end":356,"column_start":1,"column_end":58}},{"value":"/ Used by `parallel_fasta`/`parallel_fastq`","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76826,"byte_end":76871,"line_start":357,"line_end":357,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76872,"byte_end":76875,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76876,"byte_end":76889,"line_start":359,"line_end":359,"column_start":1,"column_end":14}},{"value":"/ use seq_io::fastq::{Reader,Record,RecordSet};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76890,"byte_end":76939,"line_start":360,"line_end":360,"column_start":1,"column_end":50}},{"value":"/ use seq_io::parallel::{read_parallel,ReusableReader};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76940,"byte_end":76997,"line_start":361,"line_end":361,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":76998,"byte_end":77001,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ let inner = Reader::from_path(\"seqs.fastq\").unwrap();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77002,"byte_end":77059,"line_start":363,"line_end":363,"column_start":1,"column_end":58}},{"value":"/ let reader = ReusableReader::new(inner);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77060,"byte_end":77104,"line_start":364,"line_end":364,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77105,"byte_end":77108,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ read_parallel(reader, 4, 2, |&mut (ref record_set, ref mut out): &mut (RecordSet, Vec<bool>)| {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77109,"byte_end":77208,"line_start":366,"line_end":366,"column_start":1,"column_end":100}},{"value":"/     out.clear();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77209,"byte_end":77229,"line_start":367,"line_end":367,"column_start":1,"column_end":21}},{"value":"/     for record in record_set {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77230,"byte_end":77264,"line_start":368,"line_end":368,"column_start":1,"column_end":35}},{"value":"/         let found = record.seq().windows(3).position(|s| s == b\"AAA\").is_some();","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77265,"byte_end":77349,"line_start":369,"line_end":369,"column_start":1,"column_end":85}},{"value":"/         out.push(found);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77350,"byte_end":77378,"line_start":370,"line_end":370,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77379,"byte_end":77388,"line_start":371,"line_end":371,"column_start":1,"column_end":10}},{"value":"/ }, |record_sets| {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77389,"byte_end":77411,"line_start":372,"line_end":372,"column_start":1,"column_end":23}},{"value":"/     while let Some(result) = record_sets.next() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77412,"byte_end":77465,"line_start":373,"line_end":373,"column_start":1,"column_end":54}},{"value":"/         let &(ref record_set, ref out) = &*result.unwrap().0;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77466,"byte_end":77531,"line_start":374,"line_end":374,"column_start":1,"column_end":66}},{"value":"/         for (record, found) in record_set.into_iter().zip(out) {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77532,"byte_end":77600,"line_start":375,"line_end":375,"column_start":1,"column_end":69}},{"value":"/             // ...","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77601,"byte_end":77623,"line_start":376,"line_end":376,"column_start":1,"column_end":23}},{"value":"/         }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77624,"byte_end":77637,"line_start":377,"line_end":377,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77638,"byte_end":77647,"line_start":378,"line_end":378,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77648,"byte_end":77655,"line_start":379,"line_end":379,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77656,"byte_end":77663,"line_start":380,"line_end":380,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77762,"byte_end":77765,"line_start":384,"line_end":384,"column_start":12,"column_end":15},"name":"new","qualname":"<ReusableReader<P, O>>::new","value":"pub fn new(P) -> ReusableReader<P, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":436},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":78383,"byte_end":78399,"line_start":406,"line_end":406,"column_start":8,"column_end":24},"name":"parallel_records","qualname":"::parallel::parallel_records","value":"pub fn parallel_records<R, O, W, F, Out>(R, u32, usize, W, F)\n-> Result<Option<Out>, R::Err> where R: Reader + Send,\nfor<'a> &'a R::DataSet: IntoIterator, R::DataSet: Default, O: Default + Send,\nW: Send + Sync, W: Fn(<&R::DataSet as IntoIterator>::Item, &mut O) -> (),\nF: FnMut(<&R::DataSet as IntoIterator>::Item, &O) -> Option<Out>","parent":null,"children":[],"decl_id":null,"docs":" Using this function currently does not work due to a\n [compiler bug](https://github.com/rust-lang/rust/issues/42950).","sig":null,"attributes":[{"value":"/ Using this function currently does not work due to a","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":78117,"byte_end":78173,"line_start":401,"line_end":401,"column_start":1,"column_end":57}},{"value":"/ [compiler bug](https://github.com/rust-lang/rust/issues/42950).","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":78174,"byte_end":78241,"line_start":402,"line_end":402,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":78242,"byte_end":78245,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ `parallel_fasta`/`parallel_fastq` provide the same functionality for now","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":78246,"byte_end":78322,"line_start":404,"line_end":404,"column_start":1,"column_end":77}},{"value":"/ (implemented using `parallel_record_impl` macro)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":78323,"byte_end":78375,"line_start":405,"line_end":405,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":459},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"policy","qualname":"::policy","value":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":476}],"decl_id":null,"docs":" This module defines the [`BufPolicy`](trait.BufPolicy.html) trait,\n which configures how the internal buffer of the parsers should grow upon\n encountering large sequences that don't fit into the buffer.","sig":null,"attributes":[{"value":"/ This module defines the [`BufPolicy`](trait.BufPolicy.html) trait,","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80325,"byte_end":80395,"line_start":1,"line_end":1,"column_start":1,"column_end":71}},{"value":"/ which configures how the internal buffer of the parsers should grow upon","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80396,"byte_end":80472,"line_start":2,"line_end":2,"column_start":1,"column_end":77}},{"value":"/ encountering large sequences that don't fit into the buffer.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80473,"byte_end":80537,"line_start":3,"line_end":3,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80538,"byte_end":80541,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The standard policy ([`DoubleUntil`](struct.DoubleUntil.html))","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80542,"byte_end":80608,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/ causes the initial buffer to double its size until a certain limit, and","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80609,"byte_end":80684,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ to further grow linearly above the limit. However, it does not","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80685,"byte_end":80751,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ impose a hard limit on buffer size, which may be problematic in some cases.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80752,"byte_end":80831,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ For this purpose we can use","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80832,"byte_end":80863,"line_start":9,"line_end":9,"column_start":1,"column_end":32}},{"value":"/ [`DoubleUntilLimited`](struct.DoubleUntilLimited.html),","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80864,"byte_end":80923,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ or implement our own solution, as shown:","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80924,"byte_end":80968,"line_start":11,"line_end":11,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80969,"byte_end":80972,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80973,"byte_end":80986,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/ # extern crate seq_io;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":80987,"byte_end":81013,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/ # fn main() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81014,"byte_end":81031,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/ use seq_io::policy::BufPolicy;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81032,"byte_end":81066,"line_start":16,"line_end":16,"column_start":1,"column_end":35}},{"value":"/ use seq_io::fasta::{Reader,Record};","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81067,"byte_end":81106,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"/ use std::io::stdin;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81107,"byte_end":81130,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81131,"byte_end":81134,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ struct Max1G;","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81135,"byte_end":81152,"line_start":20,"line_end":20,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81153,"byte_end":81156,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // This policy lets the buffer double each time, but","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81157,"byte_end":81213,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/ // limits the buffer size to 1 GiB. Note that this is similar to how","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81214,"byte_end":81286,"line_start":23,"line_end":23,"column_start":1,"column_end":73}},{"value":"/ // `DoubleUntilLimited` works.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81287,"byte_end":81321,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/ impl BufPolicy for Max1G {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81322,"byte_end":81352,"line_start":25,"line_end":25,"column_start":1,"column_end":31}},{"value":"/     fn grow_to(&mut self, current_size: usize) -> Option<usize> {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81353,"byte_end":81422,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/         if current_size > 1 << 30 {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81423,"byte_end":81462,"line_start":27,"line_end":27,"column_start":1,"column_end":40}},{"value":"/             return None","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81463,"byte_end":81490,"line_start":28,"line_end":28,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81491,"byte_end":81504,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/         Some(current_size * 2)","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81505,"byte_end":81539,"line_start":30,"line_end":30,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81540,"byte_end":81549,"line_start":31,"line_end":31,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81550,"byte_end":81555,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81556,"byte_end":81559,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(stdin()).set_policy(Max1G);","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81560,"byte_end":81620,"line_start":34,"line_end":34,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81621,"byte_end":81624,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ while let Some(record) = reader.next() {","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81625,"byte_end":81669,"line_start":36,"line_end":36,"column_start":1,"column_end":45}},{"value":"/     println!(\"{}\", record.unwrap().id().unwrap());","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81670,"byte_end":81724,"line_start":37,"line_end":37,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81725,"byte_end":81730,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81731,"byte_end":81738,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81739,"byte_end":81746,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":460},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82119,"byte_end":82128,"line_start":49,"line_end":49,"column_start":11,"column_end":20},"name":"BufPolicy","qualname":"::policy::BufPolicy","value":"BufPolicy","parent":null,"children":[{"krate":0,"index":461}],"decl_id":null,"docs":" Policy that configures how the internal buffer grows upon\n encountering large sequences.","sig":null,"attributes":[{"value":"/ Policy that configures how the internal buffer grows upon","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81748,"byte_end":81809,"line_start":42,"line_end":42,"column_start":1,"column_end":62}},{"value":"/ encountering large sequences.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81810,"byte_end":81843,"line_start":43,"line_end":43,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81844,"byte_end":81847,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Takes the current buffer size in bytes and returns the new","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81848,"byte_end":81910,"line_start":45,"line_end":45,"column_start":1,"column_end":63}},{"value":"/ size the the buffer should grow to. Returning `None` instead will indicate","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81911,"byte_end":81989,"line_start":46,"line_end":46,"column_start":1,"column_end":79}},{"value":"/ that the buffer has grown too big. In this case, the FASTA and FASTQ readers","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":81990,"byte_end":82070,"line_start":47,"line_end":47,"column_start":1,"column_end":81}},{"value":"/ will return `Error::BufferLimit`.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82071,"byte_end":82108,"line_start":48,"line_end":48,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82138,"byte_end":82145,"line_start":50,"line_end":50,"column_start":8,"column_end":15},"name":"grow_to","qualname":"::policy::BufPolicy::grow_to","value":"pub fn grow_to(&mut Self, usize) -> Option<usize>","parent":{"krate":0,"index":460},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":462},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82483,"byte_end":82492,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"StdPolicy","qualname":"::policy::StdPolicy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Standard buffer policy: This policy corresponds to\n `DoubleUntil(8 * 1024 * 1024)`, meaning that buffer size\n doubles until it reaches 8 MiB. Above, it will\n increase in steps of 8 MiB. Buffer size is not limited,\n it could theoretically grow indefinitely.\n","sig":null,"attributes":[{"value":"/ Standard buffer policy: This policy corresponds to","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82199,"byte_end":82253,"line_start":53,"line_end":53,"column_start":1,"column_end":55}},{"value":"/ `DoubleUntil(8 * 1024 * 1024)`, meaning that buffer size","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82254,"byte_end":82314,"line_start":54,"line_end":54,"column_start":1,"column_end":61}},{"value":"/ doubles until it reaches 8 MiB. Above, it will","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82315,"byte_end":82365,"line_start":55,"line_end":55,"column_start":1,"column_end":51}},{"value":"/ increase in steps of 8 MiB. Buffer size is not limited,","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82366,"byte_end":82425,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/ it could theoretically grow indefinitely.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82426,"byte_end":82471,"line_start":57,"line_end":57,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":466},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82950,"byte_end":82961,"line_start":74,"line_end":74,"column_start":12,"column_end":23},"name":"DoubleUntil","qualname":"::policy::DoubleUntil","value":"","parent":null,"children":[],"decl_id":null,"docs":" Buffer size doubles until it reaches a given limit\n (in bytes). Above, it will increase linearly in\n steps of 'limit'. Buffer size is not limited,\n it could theoretically grow indefinitely.\n","sig":null,"attributes":[{"value":"/ Buffer size doubles until it reaches a given limit","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82736,"byte_end":82790,"line_start":70,"line_end":70,"column_start":1,"column_end":55}},{"value":"/ (in bytes). Above, it will increase linearly in","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82791,"byte_end":82842,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/ steps of 'limit'. Buffer size is not limited,","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82843,"byte_end":82892,"line_start":72,"line_end":72,"column_start":1,"column_end":50}},{"value":"/ it could theoretically grow indefinitely.","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82893,"byte_end":82938,"line_start":73,"line_end":73,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":468},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82962,"byte_end":82971,"line_start":74,"line_end":74,"column_start":24,"column_end":33},"name":"0","qualname":"::policy::DoubleUntil::0","value":"usize","parent":{"krate":0,"index":466},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":471},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":83471,"byte_end":83489,"line_start":91,"line_end":91,"column_start":12,"column_end":30},"name":"DoubleUntilLimited","qualname":"::policy::DoubleUntilLimited","value":"DoubleUntilLimited {  }","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473}],"decl_id":null,"docs":" Buffer size doubles until it reaches a given limit\n (in bytes). Above, it will increase linearly in\n steps of 'double_until'. Buffer size is additionally\n limited to `limit` bytes. Readers will return an error\n if this limit is .\n","sig":null,"attributes":[{"value":"/ Buffer size doubles until it reaches a given limit","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":83214,"byte_end":83268,"line_start":86,"line_end":86,"column_start":1,"column_end":55}},{"value":"/ (in bytes). Above, it will increase linearly in","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":83269,"byte_end":83320,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/ steps of 'double_until'. Buffer size is additionally","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":83321,"byte_end":83377,"line_start":88,"line_end":88,"column_start":1,"column_end":57}},{"value":"/ limited to `limit` bytes. Readers will return an error","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":83378,"byte_end":83436,"line_start":89,"line_end":89,"column_start":1,"column_end":59}},{"value":"/ if this limit is .","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":83437,"byte_end":83459,"line_start":90,"line_end":90,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":83575,"byte_end":83578,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"new","qualname":"<DoubleUntilLimited>::new","value":"pub fn new(usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8201,"byte_end":8207,"line_start":77,"line_end":77,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9346,"byte_end":9352,"line_start":117,"line_end":117,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9800,"byte_end":9806,"line_start":135,"line_end":135,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20033,"byte_end":20039,"line_start":471,"line_end":471,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":22293,"byte_end":22304,"line_start":539,"line_end":539,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":22709,"byte_end":22724,"line_start":555,"line_end":555,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23114,"byte_end":23122,"line_start":573,"line_end":573,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23922,"byte_end":23927,"line_start":606,"line_end":606,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":24440,"byte_end":24445,"line_start":621,"line_end":621,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":24537,"byte_end":24542,"line_start":627,"line_end":627,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":25202,"byte_end":25216,"line_start":647,"line_end":647,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":27683,"byte_end":27692,"line_start":719,"line_end":719,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":28924,"byte_end":28933,"line_start":755,"line_end":755,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":31321,"byte_end":31329,"line_start":828,"line_end":828,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":31713,"byte_end":31721,"line_start":845,"line_end":845,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":31964,"byte_end":31972,"line_start":854,"line_end":854,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":32267,"byte_end":32278,"line_start":868,"line_end":868,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":33018,"byte_end":33027,"line_start":900,"line_end":900,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":33637,"byte_end":33650,"line_start":927,"line_end":927,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38019,"byte_end":38025,"line_start":42,"line_end":42,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39076,"byte_end":39082,"line_start":77,"line_end":77,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39519,"byte_end":39525,"line_start":94,"line_end":94,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51746,"byte_end":51752,"line_start":496,"line_end":496,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":53922,"byte_end":53933,"line_start":567,"line_end":567,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54341,"byte_end":54356,"line_start":583,"line_end":583,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54746,"byte_end":54754,"line_start":601,"line_end":601,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":56434,"byte_end":56447,"line_start":663,"line_end":663,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":56682,"byte_end":56687,"line_start":672,"line_end":672,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":57818,"byte_end":57823,"line_start":701,"line_end":701,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":57911,"byte_end":57916,"line_start":707,"line_end":707,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":58361,"byte_end":58375,"line_start":726,"line_end":726,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":60920,"byte_end":60929,"line_start":809,"line_end":809,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":61215,"byte_end":61224,"line_start":826,"line_end":826,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":62078,"byte_end":62089,"line_start":854,"line_end":854,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":62543,"byte_end":62552,"line_start":877,"line_end":877,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":63121,"byte_end":63134,"line_start":903,"line_end":903,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":71357,"byte_end":71375,"line_start":213,"line_end":213,"column_start":15,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77728,"byte_end":77742,"line_start":383,"line_end":383,"column_start":12,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77868,"byte_end":77882,"line_start":389,"line_end":389,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":79711,"byte_end":79717,"line_start":457,"line_end":457,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":80042,"byte_end":80048,"line_start":471,"line_end":471,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82514,"byte_end":82523,"line_start":60,"line_end":60,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82994,"byte_end":83005,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":83543,"byte_end":83561,"line_start":96,"line_end":96,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":83736,"byte_end":83754,"line_start":105,"line_end":105,"column_start":20,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":5058,"byte_end":5063,"line_start":140,"line_end":140,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":12}},{"kind":"Mod","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":5073,"byte_end":5078,"line_start":141,"line_end":141,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":209}},{"kind":"Mod","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":5088,"byte_end":5096,"line_start":142,"line_end":142,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":373}},{"kind":"Mod","span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/lib.rs","byte_start":5106,"byte_end":5112,"line_start":143,"line_end":143,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":459}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":8201,"byte_end":8207,"line_start":77,"line_end":77,"column_start":9,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9346,"byte_end":9352,"line_start":117,"line_end":117,"column_start":6,"column_end":12},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":9800,"byte_end":9806,"line_start":135,"line_end":135,"column_start":12,"column_end":18},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":20033,"byte_end":20039,"line_start":471,"line_end":471,"column_start":12,"column_end":18},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":22293,"byte_end":22304,"line_start":539,"line_end":539,"column_start":29,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":75},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":22709,"byte_end":22724,"line_start":555,"line_end":555,"column_start":25,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":88},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23114,"byte_end":23122,"line_start":573,"line_end":573,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":23922,"byte_end":23927,"line_start":606,"line_end":606,"column_start":23,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":507},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":24440,"byte_end":24445,"line_start":621,"line_end":621,"column_start":26,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":507},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":24537,"byte_end":24542,"line_start":627,"line_end":627,"column_start":23,"column_end":28},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":507},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":25202,"byte_end":25216,"line_start":647,"line_end":647,"column_start":6,"column_end":20},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":518},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":27683,"byte_end":27692,"line_start":719,"line_end":719,"column_start":21,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":574},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":28924,"byte_end":28933,"line_start":755,"line_end":755,"column_start":10,"column_end":19},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":31321,"byte_end":31329,"line_start":828,"line_end":828,"column_start":23,"column_end":31},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":146},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":31713,"byte_end":31721,"line_start":845,"line_end":845,"column_start":34,"column_end":42},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":146},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":31964,"byte_end":31972,"line_start":854,"line_end":854,"column_start":32,"column_end":40},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":146},"to":{"krate":2,"index":5235}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":32267,"byte_end":32278,"line_start":868,"line_end":868,"column_start":17,"column_end":28},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":584},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":33018,"byte_end":33027,"line_start":900,"line_end":900,"column_start":18,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":647},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fasta.rs","byte_start":33637,"byte_end":33650,"line_start":927,"line_end":927,"column_start":23,"column_end":36},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":178},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":38019,"byte_end":38025,"line_start":42,"line_end":42,"column_start":9,"column_end":15},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39076,"byte_end":39082,"line_start":77,"line_end":77,"column_start":6,"column_end":12},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":39519,"byte_end":39525,"line_start":94,"line_end":94,"column_start":12,"column_end":18},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":51746,"byte_end":51752,"line_start":496,"line_end":496,"column_start":12,"column_end":18},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":53922,"byte_end":53933,"line_start":567,"line_end":567,"column_start":29,"column_end":40},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":279},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54341,"byte_end":54356,"line_start":583,"line_end":583,"column_start":25,"column_end":40},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":292},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":54746,"byte_end":54754,"line_start":601,"line_end":601,"column_start":6,"column_end":14},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":56434,"byte_end":56447,"line_start":663,"line_end":663,"column_start":23,"column_end":36},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":56682,"byte_end":56687,"line_start":672,"line_end":672,"column_start":23,"column_end":28},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":756},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":57818,"byte_end":57823,"line_start":701,"line_end":701,"column_start":26,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":756},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":57911,"byte_end":57916,"line_start":707,"line_end":707,"column_start":19,"column_end":24},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":756},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":58361,"byte_end":58375,"line_start":726,"line_end":726,"column_start":6,"column_end":20},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":60920,"byte_end":60929,"line_start":809,"line_end":809,"column_start":21,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":854},"to":{"krate":0,"index":324}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":61215,"byte_end":61224,"line_start":826,"line_end":826,"column_start":10,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":854},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":62078,"byte_end":62089,"line_start":854,"line_end":854,"column_start":17,"column_end":28},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":864},"to":{"krate":0,"index":324}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":62543,"byte_end":62552,"line_start":877,"line_end":877,"column_start":18,"column_end":27},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":930},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/fastq.rs","byte_start":63121,"byte_end":63134,"line_start":903,"line_end":903,"column_start":23,"column_end":36},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":360},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":71357,"byte_end":71375,"line_start":213,"line_end":213,"column_start":15,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77728,"byte_end":77742,"line_start":383,"line_end":383,"column_start":12,"column_end":26},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":420},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":77868,"byte_end":77882,"line_start":389,"line_end":389,"column_start":23,"column_end":37},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":420},"to":{"krate":0,"index":379}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":79711,"byte_end":79717,"line_start":457,"line_end":457,"column_start":30,"column_end":36},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":33},"to":{"krate":0,"index":379}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/parallel.rs","byte_start":80042,"byte_end":80048,"line_start":471,"line_end":471,"column_start":30,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":231},"to":{"krate":0,"index":379}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82514,"byte_end":82523,"line_start":60,"line_end":60,"column_start":20,"column_end":29},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":462},"to":{"krate":0,"index":460}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":82994,"byte_end":83005,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":466},"to":{"krate":0,"index":460}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":83543,"byte_end":83561,"line_start":96,"line_end":96,"column_start":6,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/noahaus/.cargo/registry/src/github.com-1ecc6299db9ec823/seq_io-0.3.1/src/policy.rs","byte_start":83736,"byte_end":83754,"line_start":105,"line_end":105,"column_start":20,"column_end":38},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":471},"to":{"krate":0,"index":460}}]}